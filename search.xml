<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《MySQL》</title>
      <link href="/2025/06/08/2025060819/"/>
      <url>/2025/06/08/2025060819/</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</p><h2 id="RDBMS-术语">RDBMS 术语</h2><ul><li><strong>数据库:</strong> 数据库是一些关联表的集合。</li><li><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li><strong>列:</strong> 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。</li><li>**行：**一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>**外键：**外键用于关联两个表。</li><li><strong>复合键</strong>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li>**索引：**使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li><strong>参照完整性:</strong> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><h2 id="数据库操作">数据库操作</h2><h3 id="创建数据库">创建数据库</h3><p>创建数据库的语法是：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名;</span><br></pre></td></tr></table></figure><p>通常情况下，我们在创建数据库的时候会额外加上 <code>if not exists</code>，否则当数据库已经存在的时候，会报 <code>database exists</code> 的错误。</p><h3 id="切换数据库">切换数据库</h3><p>切换数据库的语法是：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><h3 id="删除数据库">删除数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure><p>删除数据库的时候，也可以带上 <code>if exists</code>，这样当数据库不存在的时候，就不会报错了。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> test;</span><br></pre></td></tr></table></figure><h2 id="表操作">表操作</h2><h3 id="查表">查表</h3><p>查看当前数据库中的所有表，可以使用 <code>show tables;</code> 命令。</p><p>假如不指定数据库的话，我们可以通过 <code>show tables from database</code> 的方式，来指定要操作的表。</p><h3 id="建表">建表</h3><p>创建表的语法如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> 表名(</span><br><span class="line">    列名<span class="number">1</span> 数据类型<span class="number">1</span>,</span><br><span class="line">    列名<span class="number">2</span> 数据类型<span class="number">2</span>,</span><br><span class="line">    ...</span><br><span class="line">    列名n 数据类型n</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们创建一张文章表，表中包含文章的标题、内容、作者、发布时间、阅读量等信息，那么可以这样创建：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> article(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary key</span> auto_increment,</span><br><span class="line">    title <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not null</span>,</span><br><span class="line">    content text <span class="keyword">not null</span>,</span><br><span class="line">    author <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not null</span>,</span><br><span class="line">    create_time datetime <span class="keyword">not null</span>,</span><br><span class="line">    read_count <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>article 是表名；</li><li>id 是主键，类型为 int，自增长；</li><li>title 是标题，类型为 varchar，长度为 100，不允许为空；</li><li>content 是内容，类型为 text，不允许为空；</li><li>author 是作者，类型为 varchar，长度为 20，不允许为空；</li><li>create_time 是发布时间，类型为 datetime，不允许为空；</li><li>read_count 是阅读量，类型为 int，默认值为 0。</li></ul><p>执行上述语句后，可以使用 <code>show tables;</code> 命令查看当前数据库中的所有表。</p><h3 id="给表添加注释">给表添加注释</h3><p>在建表的时候，我们可以给表添加注释，语法如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> 表名(</span><br><span class="line">    列名<span class="number">1</span> 数据类型<span class="number">1</span> comment <span class="string">&#x27;注释1&#x27;</span>,</span><br><span class="line">    列名<span class="number">2</span> 数据类型<span class="number">2</span> comment <span class="string">&#x27;注释2&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">    列名n 数据类型n comment <span class="string">&#x27;注释n&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;表注释&#x27;</span>;</span><br></pre></td></tr></table></figure><p>方便我们在后期维护的时候，能够更好的理解表的含义。</p><p>在之前的基础上增加了一些字段的注释和表注释：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> article(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary key</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    title <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">    content text <span class="keyword">not null</span> comment <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">    author <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;作者&#x27;</span>,</span><br><span class="line">    create_time datetime <span class="keyword">not null</span> comment <span class="string">&#x27;发布时间&#x27;</span>,</span><br><span class="line">    read_count <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;阅读量&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;文章表&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="假如表已存在">假如表已存在</h3><p>由于之前 article 表已经创建了，这时候再执行上述语句，就会报错 <code>Table 'article' already exists</code></p><p>为了避免这种情况，我们可以在建表的时候，先判断表是否存在，如果不存在，再创建表，语法如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> 表名(</span><br><span class="line">    列名<span class="number">1</span> 数据类型<span class="number">1</span>,</span><br><span class="line">    列名<span class="number">2</span> 数据类型<span class="number">2</span>,</span><br><span class="line">    ...</span><br><span class="line">    列名n 数据类型n</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="删表">删表</h3><p>删除表的语法如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>在删除表的时候也可以加上 <code>if exists</code>，语法如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名;</span><br></pre></td></tr></table></figure><p>这样可以防止表不存在的时候，报错。</p><h3 id="查看表结构">查看表结构</h3><p>有时候，我们想知道表的结构是什么样的，也就是 create table 的时候包含了哪些列、列有哪些属性，那这时候我们可以使用以下这些命令查看：</p><ul><li><code>desc 表名;</code></li><li><code>describe 表名;</code></li><li><code>explain 表名;</code></li><li><code>show columns from 表名;</code></li><li><code>show fields from 表名;</code></li></ul><p>还有一个命令 <code>show create table 表名;</code>，可以查看建表语句。</p><p>假如没有使用 <code>use 数据库名;</code> 命令指定要操作的数据库，那我们可以通过 <code>show columns from 数据库名.表名;</code> 的方式，来查看表的结构，例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create table</span> itwanger.article;</span><br></pre></td></tr></table></figure><p>可以通过 <code>\G</code> 来格式化输出，例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create table</span> itwanger.article \G;</span><br></pre></td></tr></table></figure><h2 id="数据类型">数据类型</h2><h3 id="数值类型">数值类型</h3><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小</th><th style="text-align:left">范围（有符号）</th><th style="text-align:left">范围（无符号）</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">TINYINT</td><td style="text-align:left">1 Bytes</td><td style="text-align:left">(-128，127)</td><td style="text-align:left">(0，255)</td><td style="text-align:left">小整数值</td></tr><tr><td style="text-align:left">SMALLINT</td><td style="text-align:left">2 Bytes</td><td style="text-align:left">(-32 768，32 767)</td><td style="text-align:left">(0，65 535)</td><td style="text-align:left">大整数值</td></tr><tr><td style="text-align:left">MEDIUMINT</td><td style="text-align:left">3 Bytes</td><td style="text-align:left">(-8 388 608，8 388 607)</td><td style="text-align:left">(0，16 777 215)</td><td style="text-align:left">大整数值</td></tr><tr><td style="text-align:left">INT或INTEGER</td><td style="text-align:left">4 Bytes</td><td style="text-align:left">(-2 147 483 648，2 147 483 647)</td><td style="text-align:left">(0，4 294 967 295)</td><td style="text-align:left">大整数值</td></tr><tr><td style="text-align:left">BIGINT</td><td style="text-align:left">8 Bytes</td><td style="text-align:left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td style="text-align:left">(0，18 446 744 073 709 551 615)</td><td style="text-align:left">极大整数值</td></tr><tr><td style="text-align:left">FLOAT</td><td style="text-align:left">4 Bytes</td><td style="text-align:left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td style="text-align:left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td style="text-align:left">单精度 浮点数值</td></tr><tr><td style="text-align:left">DOUBLE</td><td style="text-align:left">8 Bytes</td><td style="text-align:left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td style="text-align:left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td style="text-align:left">双精度 浮点数值</td></tr><tr><td style="text-align:left">DECIMAL</td><td style="text-align:left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td style="text-align:left">依赖于M和D的值</td><td style="text-align:left">依赖于M和D的值</td><td style="text-align:left">小数值</td></tr></tbody></table><p>smallint 和 mediuint 这两种类型很少用到，一般我们用的是 tinyint、int、bigint 这三种类型。</p><p>对于主键的数据类型选择，不同的业务场景有不同的需求，如果需要确保跨多个数据库或者系统唯一性，那么 <strong>UUID</strong> 或者 <strong>雪花算法</strong> 生成的 ID 会更合适。</p><p>UUID 不依赖于数据库的自增特性，非常适合分布式系统，但是 UUID 会占用更多的存储空间（<code>CHAR(36)</code> 或 <code>VARCHAR(36)</code>），而且不是递增的，会导致 <strong>索引</strong> 的性能下降。</p><h4 id="有无符号">有无符号</h4><p>数值数据类型还可以选择有符号和无符号，有符号就是可以存储正数和负数，无符号就是只能存储正数。默认为有符号，也就是不用指定。</p><p>比如说 int 类型，如果是有符号的，那么范围是 -2147483648 到 2147483647，如果是无符号的，那么范围是 0 到 4294967295。</p><p><strong>无符号的情况下，要特别注意和 Java 数据类型的对应关系</strong>。</p><p>Java 中的 <strong>int 范围</strong> 是 -2147483648 到 2147483647。如果 MySQL 选择的 int 类型是无符号的，范围就超出了 Java 的 int 类型范围了。</p><p>这时候，为了避免出现不兼容的情况，Java 的数据类型要选择 long 类型。</p><h3 id="日期和时间类型">日期和时间类型</h3><p>每个时间类型有一个有效值范围和一个&quot;零&quot;值，当指定不合法的MySQL不能表示的值时使用&quot;零&quot;值。</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小 ( bytes)</th><th style="text-align:left">范围</th><th style="text-align:left">格式</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">DATE</td><td style="text-align:left">3</td><td style="text-align:left">1000-01-01/9999-12-31</td><td style="text-align:left">YYYY-MM-DD</td><td style="text-align:left">日期值</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">3</td><td style="text-align:left">‘-838:59:59’/‘838:59:59’</td><td style="text-align:left">HH:MM:SS</td><td style="text-align:left">时间值或持续时间</td></tr><tr><td style="text-align:left">YEAR</td><td style="text-align:left">1</td><td style="text-align:left">1901/2155</td><td style="text-align:left">YYYY</td><td style="text-align:left">年份值</td></tr><tr><td style="text-align:left">DATETIME</td><td style="text-align:left">8</td><td style="text-align:left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td style="text-align:left">YYYY-MM-DD hh:mm:ss</td><td style="text-align:left">混合日期和时间值</td></tr><tr><td style="text-align:left">TIMESTAMP</td><td style="text-align:left">4</td><td style="text-align:left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td style="text-align:left">YYYY-MM-DD hh:mm:ss</td><td style="text-align:left">混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="字符串类型">字符串类型</h3><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">CHAR</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">定长字符串</td></tr><tr><td style="text-align:left">VARCHAR</td><td style="text-align:left">0-65535 bytes</td><td style="text-align:left">变长字符串</td></tr><tr><td style="text-align:left">TINYBLOB</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:left">TINYTEXT</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">短文本字符串</td></tr><tr><td style="text-align:left">BLOB</td><td style="text-align:left">0-65 535 bytes</td><td style="text-align:left">二进制形式的长文本数据</td></tr><tr><td style="text-align:left">TEXT</td><td style="text-align:left">0-65 535 bytes</td><td style="text-align:left">长文本数据</td></tr><tr><td style="text-align:left">MEDIUMBLOB</td><td style="text-align:left">0-16 777 215 bytes</td><td style="text-align:left">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:left">MEDIUMTEXT</td><td style="text-align:left">0-16 777 215 bytes</td><td style="text-align:left">中等长度文本数据</td></tr><tr><td style="text-align:left">LONGBLOB</td><td style="text-align:left">0-4 294 967 295 bytes</td><td style="text-align:left">二进制形式的极大文本数据</td></tr><tr><td style="text-align:left">LONGTEXT</td><td style="text-align:left">0-4 294 967 295 bytes</td><td style="text-align:left">极大文本数据</td></tr></tbody></table><p><strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p><h3 id="枚举与集合类型">枚举与集合类型</h3><ul><li><strong>ENUM</strong>: 枚举类型，用于存储单一值，可以选择一个预定义的集合。</li><li><strong>SET</strong>: 集合类型，用于存储多个值，可以选择多个预定义的集合。</li></ul><h3 id="空间数据类型">空间数据类型</h3><p>GEOMETRY, POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON, GEOMETRYCOLLECTION: 用于存储空间数据（地理信息、几何图形等）。</p><h2 id="字段属性">字段属性</h2><ul><li>如果你不想字段为<strong>空</strong>可以设置字段的属性为 <strong>NOT NULL</strong>，在操作数据库时如果输入该字段的数据为空，就会报错。</li><li><strong>AUTO_INCREMENT</strong> 定义列为自增的属性，一般用于主键，数值会自动加 1。</li><li><strong>PRIMARY KEY</strong> 关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号 <strong>,</strong> 分隔。</li><li><strong>ENGINE</strong> 设置存储引擎，<strong>CHARSET</strong> 设置编码。</li></ul><h2 id="插入数据">插入数据</h2><p>MySQL 表中使用 <strong>INSERT INTO</strong> 语句来插入数据。</p><p>以下为向MySQL数据表插入数据通用的 <strong>INSERT INTO</strong> SQL语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> table_name (column1, column2, column3, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure><p>如果数据是字符型，必须使用单引号 <strong>’</strong> 或者双引号 <strong>&quot;</strong>，如： ‘value1’, “value1”。</p><p>如果你要插入所有列的数据，可以省略列名：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> users</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test@123.com&#x27;</span>, <span class="string">&#x27;1990-01-01&#x27;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>这里，<strong>NULL</strong> 是用于自增长列的占位符，表示系统将为 <strong>id</strong> 列生成一个唯一的值。</p><p>如果你要插入多行数据，可以在 VALUES 子句中指定多组数值：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> users (username, email, birthdate, is_active)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test1@123.com&#x27;</span>, <span class="string">&#x27;1985-07-10&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;test2@123.com&#x27;</span>, <span class="string">&#x27;1988-11-25&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">    (<span class="string">&#x27;test3&#x27;</span>, <span class="string">&#x27;test3@123.com&#x27;</span>, <span class="string">&#x27;1993-05-03&#x27;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="查询数据">查询数据</h2><p>MySQL 数据库使用 <strong>SELECT</strong> 语句来查询数据。</p><p>以下为在 MySQL 数据库中查询数据通用的 SELECT 语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]]</span><br><span class="line">[LIMIT number];</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>column1</code>, <code>column2</code>, … 是你想要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li><li><code>table_name</code> 是你要从中查询数据的表的名称。</li><li><code>WHERE condition</code> 是一个可选的子句，用于指定过滤条件，只返回符合条件的行。</li><li><code>ORDER BY column_name [ASC | DESC]</code> 是一个可选的子句，用于指定结果集的排序顺序，默认是升序（ASC）。</li><li><code>LIMIT number</code> 是一个可选的子句，用于限制返回的行数。</li></ul><p>SELECT 语句可以是灵活的，我们可以根据实际需求组合和使用这些子句，比如同时使用 WHERE 和 ORDER BY 子句，或者使用 LIMIT 控制返回的行数。</p><p>在 <code>WHERE</code> 子句中，你可以使用各种条件运算符（如 <code>=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>!=</code>），逻辑运算符（如 <code>AND</code>, <code>OR</code>, <code>NOT</code>），以及通配符（如 <code>%</code>）等。</p><h3 id="WHERE-子句">WHERE 子句</h3><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中。</p><p>WHERE 子句用于在 MySQL 中过滤查询结果，只返回满足特定条件的行。</p><h4 id="语法">语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>column1</code>, <code>column2</code>, … 是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li><li><code>table_name</code> 是你要从中查询数据的表的名称。</li><li><code>WHERE condition</code> 是用于指定过滤条件的子句。</li></ul><p><strong>更多说明：</strong></p><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号**,** 分割，并使用WHERE语句来设定查询条件。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li><li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul><p>以下为操作符列表，可用于 WHERE 子句中。</p><p>下表中实例假定 A 为 10, B 为 20</p><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">等号，检测两个值是否相等，如果相等返回true</td><td style="text-align:left">(A = B) 返回false。</td></tr><tr><td style="text-align:left">&lt;&gt;, !=</td><td style="text-align:left">不等于，检测两个值是否相等，如果不相等返回true</td><td style="text-align:left">(A != B) 返回 true。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td style="text-align:left">(A &gt; B) 返回false。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td style="text-align:left">(A &lt; B) 返回 true。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td style="text-align:left">(A &gt;= B) 返回false。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td style="text-align:left">(A &lt;= B) 返回 true。</td></tr></tbody></table><h4 id="简单实例">简单实例</h4><ol><li>组合条件（AND、OR）:</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;Electronics&#x27;</span> <span class="keyword">AND</span> price <span class="operator">&gt;</span> <span class="number">100.00</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_date <span class="operator">&gt;=</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">OR</span> total_amount <span class="operator">&gt;</span> <span class="number">1000.00</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>模糊匹配条件（LIKE）:</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;J%&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>IN 条件:</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> countries <span class="keyword">WHERE</span> country_code <span class="keyword">IN</span> (<span class="string">&#x27;US&#x27;</span>, <span class="string">&#x27;CA&#x27;</span>, <span class="string">&#x27;MX&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>NOT 条件:</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">NOT</span> category <span class="operator">=</span> <span class="string">&#x27;Clothing&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>BETWEEN 条件:</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-12-31&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="6"><li>IS NULL 条件</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><ol start="7"><li>IS NOT NULL 条件:</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> email <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>;</span><br></pre></td></tr></table></figure><p>使用主键来作为 WHERE 子句的条件查询是非常快速的。</p><p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p><h2 id="修改数据">修改数据</h2><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 <strong>UPDATE</strong> 命令来操作。</p><h3 id="语法-2">语法</h3><p>以下是 UPDATE 命令修改 MySQL 数据表数据的通用 SQL 语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>table_name</code> 是你要更新数据的表的名称。</li><li><code>column1</code>, <code>column2</code>, … 是你要更新的列的名称。</li><li><code>value1</code>, <code>value2</code>, … 是新的值，用于替换旧的值。</li><li><code>WHERE condition</code> 是一个可选的子句，用于指定更新的行。如果省略 <code>WHERE</code> 子句，将更新表中的所有行。</li></ul><p><strong>更多说明：</strong></p><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul><h3 id="实例">实例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> customers</span><br><span class="line"><span class="keyword">SET</span> total_purchases <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(amount)</span><br><span class="line">    <span class="keyword">FROM</span> orders</span><br><span class="line">    <span class="keyword">WHERE</span> orders.customer_id <span class="operator">=</span> customers.customer_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> customer_type <span class="operator">=</span> <span class="string">&#x27;Premium&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句通过子查询计算每个 ‘Premium’ 类型客户的总购买金额，并将该值更新到 total_purchases 列中。</p><h2 id="删除数据">删除数据</h2><p>你可以使用 <strong>DELETE FROM</strong> 命令来删除 MySQL 数据表中的记录。</p><p>你可以在 <strong>mysql&gt;</strong> 命令提示符或 PHP 脚本中执行该命令。</p><h3 id="语法-3">语法</h3><p>以下是 DELETE 语句从 MySQL 数据表中删除数据的通用语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>table_name</code> 是你要删除数据的表的名称。</li><li><code>WHERE condition</code> 是一个可选的子句，用于指定删除的行。如果省略 <code>WHERE</code> 子句，将删除表中的所有行。</li></ul><p><strong>更多说明：</strong></p><ul><li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</li><li>你可以在 WHERE 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录。</li></ul><h3 id="实例-2">实例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> customer_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> customer_id</span><br><span class="line">    <span class="keyword">FROM</span> orders</span><br><span class="line">    <span class="keyword">WHERE</span> order_date <span class="operator">&lt;</span> <span class="string">&#x27;2023-01-01&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>以上 SQL 语句通过子查询删除了 orders 表中在 ‘2023-01-01’ 之前下的订单对应的客户。</p><h2 id="模糊查询">模糊查询</h2><p>我们知道在 MySQL 中使用 <strong>SELECT</strong> 命令来读取数据， 同时我们可以在 <strong>SELECT</strong> 语句中使用 <strong>WHERE</strong> 子句来获取指定的记录。</p><p>有时候我们需要获取 author 字段含有 “COM” 字符的所有记录，这时我们就需要在 WHERE 子句中使用 <strong>LIKE</strong> 子句。</p><p><strong>LIKE</strong> 子句是在 MySQL 中用于在 WHERE 子句中进行模糊匹配的关键字。它通常与通配符一起使用，用于搜索符合某种模式的字符串。</p><p><strong>LIKE</strong> 子句中使用百分号 **%**字符来表示任意字符，类似于UNIX或正则表达式中的星号 *****。</p><p>如果没有使用百分号 <strong>%</strong>, LIKE 子句与等号 <strong>=</strong> 的效果是一样的。</p><h3 id="语法-4">语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">LIKE</span> <span class="keyword">pattern</span>;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>column1</code>, <code>column2</code>, … 是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li><li><code>table_name</code> 是你要从中查询数据的表的名称。</li><li><code>column_name</code> 是你要应用 <code>LIKE</code> 子句的列的名称。</li><li><code>pattern</code> 是用于匹配的模式，可以包含通配符。</li></ul><p><strong>更多说明：</strong></p><ul><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在 WHERE 子句中使用LIKE子句。</li><li>你可以使用LIKE子句代替等号 <strong>=</strong>。</li><li>LIKE 通常与 <strong>%</strong> 一同使用，类似于一个元字符的搜索。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</li></ul><h3 id="实例-3">实例</h3><ol><li>百分号通配符 %：</li></ol><p><strong>%</strong> 通配符表示零个或多个字符。例如，<strong>‘a%’</strong> 匹配以字母 <strong>‘a’</strong> 开头的任何字符串。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将选择所有姓氏以 ‘S’ 开头的客户。</p><ol start="2"><li>下划线通配符 _：</li></ol><p><strong>_</strong> 通配符表示一个字符。例如，<strong>‘_r%’</strong> 匹配第二个字母为 <strong>‘r’</strong> 的任何字符串。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> product_name <span class="keyword">LIKE</span> <span class="string">&#x27;_a%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将选择产品名称的第二个字符为 ‘a’ 的所有产品。</p><ol start="3"><li>组合使用 % 和 _：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">&#x27;a%o_&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将匹配以字母 ‘a’ 开头，然后是零个或多个字符，接着是 ‘o’，最后是一个任意字符的字符串，如 ‘aaron’、‘apol’。</p><ol start="4"><li>不区分大小写的匹配：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;smi%&#x27;</span> <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将选择姓氏以 <strong>‘smi’</strong> 开头的所有员工，不区分大小写。</p><h2 id="UNION">UNION</h2><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合，并去除重复的行。</p><p>UNION 操作符必须由两个或多个 SELECT 语句组成，每个 SELECT 语句的列数和对应位置的数据类型必须相同。</p><h3 id="语法-5">语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">WHERE</span> condition1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table2</span><br><span class="line"><span class="keyword">WHERE</span> condition2</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2, ...];</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>column1</code>, <code>column2</code>, … 是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li><li><code>table1</code>, <code>table2</code>, … 是你要从中查询数据的表的名称。</li><li><code>condition1</code>, <code>condition2</code>, … 是每个 <code>SELECT</code> 语句的过滤条件，是可选的。</li><li><code>ORDER BY</code> 子句是一个可选的子句，用于指定合并后的结果集的排序顺序。</li></ul><h3 id="实例-4">实例</h3><ol><li>基本的 UNION 操作：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> city <span class="keyword">FROM</span> suppliers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> city;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将选择客户表和供应商表中所有城市的唯一值，并按城市名称升序排序。</p><ol start="2"><li>使用过滤条件的 UNION：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;Electronics&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> product_name <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;Clothing&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> product_name;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将选择电子产品和服装类别的产品名称，并按产品名称升序排序。</p><ol start="3"><li>UNION 操作中的列数和数据类型必须相同：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name, <span class="keyword">NULL</span> <span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> first_name;</span><br></pre></td></tr></table></figure><p>返回的结果包括了 employees 表中的 first_name 和 last_name，以及 departments 表中的 department_name 和 NULL， 所有的结果都按照 first_name 列排序。</p><ol start="4"><li>使用 UNION ALL 不去除重复行：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> city <span class="keyword">FROM</span> suppliers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> city;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句使用 UNION ALL 将客户表和供应商表中的所有城市合并在一起，不去除重复行。</p><blockquote><p><em>UNION 操作符在合并结果集时会去除重复行，而 UNION ALL 不会去除重复行，因此 UNION ALL 的性能可能更好，但如果你确实希望去除重复行，可以使用 UNION。</em></p></blockquote><h2 id="排序语句">排序语句</h2><p>如果我们需要对读取的数据进行排序，我们就可以使用 MySQL 的 <strong>ORDER BY</strong> 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p><p>MySQL <strong>ORDER BY(排序)</strong> 语句可以按照一个或多个列的值进行升序（<strong>ASC</strong>）或降序（<strong>DESC</strong>）排序。</p><h3 id="语法-6">语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1 [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>], column2 [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>], ...;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>column1</code>, <code>column2</code>, … 是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li><li><code>table_name</code> 是你要从中查询数据的表的名称。</li><li><code>ORDER BY column1 [ASC | DESC], column2 [ASC | DESC], ...</code> 是用于指定排序顺序的子句。<code>ASC</code> 表示升序（默认），<code>DESC</code> 表示降序。</li></ul><p><strong>更多说明：</strong></p><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>你可以添加 WHERE…LIKE 子句来设置条件。</li></ul><h3 id="实例-5">实例</h3><ol><li>单列排序：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> product_name <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将选择产品表 products 中的所有产品，并按产品名称升序 ASC 排序。</p><ol start="2"><li>多列排序：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">ASC</span>, hire_date <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将选择员工表 employees 中的所有员工，并先按部门 ID 升序 ASC 排序，然后在相同部门中按雇佣日期降序 DESC 排序。</p><ol start="3"><li>使用数字表示列的位置：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">3</span> <span class="keyword">DESC</span>, <span class="number">1</span> <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将选择员工表 employees 中的名字和工资列，并按第三列（salary）降序 DESC 排序，然后按第一列（first_name）升序 ASC 排序。</p><ol start="5"><li>使用表达式排序：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, price <span class="operator">*</span> discount_rate <span class="keyword">AS</span> discounted_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> discounted_price <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将选择产品表 products 中的产品名称和根据折扣率计算的折扣后价格，并按折扣后价格降序 DESC 排序。</p><ol start="6"><li>从 MySQL 8.0.16 版本开始，可以使用 NULLS FIRST 或 NULLS LAST 处理 NULL 值：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span> <span class="keyword">NULLS LAST</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句将选择产品表 products 中的产品名称和价格，并按价格降序 DESC 排序，将 NULL 值排在最后。</p><ol start="7"><li>相反，如果你想让 NULL 值排在前面，可以这样写：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span> <span class="keyword">NULLS FIRST</span>;</span><br></pre></td></tr></table></figure><blockquote><p><em>ORDER BY 子句是一个强大的工具，可以根据不同的业务需求对查询结果进行排序。在实际应用中，注意选择适当的列和排序顺序，以获得符合期望的排序效果</em></p></blockquote><h2 id="分组语句">分组语句</h2><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p><p>在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。</p><p>GROUP BY 语句是 SQL 查询中用于汇总和分析数据的重要工具，尤其在处理大量数据时，它能够提供有用的汇总信息</p><h3 id="语法-7">语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, aggregate_function(column2)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column1;</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li><code>column1</code>：指定分组的列。</li><li><code>aggregate_function(column2)</code>：对分组后的每个组执行的聚合函数。</li><li><code>table_name</code>：要查询的表名。</li><li><code>condition</code>：可选，用于筛选结果的条件。</li></ul><p>假设有一个名为 orders 的表，包含以下列：<strong>order_id、customer_id、order_date 和 order_amount</strong>。</p><p>我们想要按照 customer_id 进行分组，并计算每个客户的订单总金额，SQL 语句如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id, <span class="built_in">SUM</span>(order_amount) <span class="keyword">AS</span> total_amount</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li><code>GROUP BY</code> 子句通常与聚合函数一起使用，因为分组后需要对每个组进行聚合操作。</li><li><code>SELECT</code> 子句中的列通常要么是分组列，要么是聚合函数的参数。</li><li>可以使用多个列进行分组，只需在 <code>GROUP BY</code> 子句中用逗号分隔列名即可。</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, aggregate_function(column3)</span><br><span class="line"><span class="keyword">FROM</span> TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column1, column2;</span><br></pre></td></tr></table></figure><h2 id="连接语句">连接语句</h2><p>你可以在 SELECT, UPDATE 和 DELETE 语句中使用 MySQL 的 JOIN 来联合多表查询。</p><p>JOIN 按照功能大致分为如下三类：</p><ul><li><strong>INNER JOIN（内连接,或等值连接）</strong>：获取两个表中字段匹配关系的记录。</li><li>**LEFT JOIN（左连接）：**获取左表所有记录，即使右表没有对应匹配的记录。</li><li><strong>RIGHT JOIN（右连接）：</strong> 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li></ul><h3 id="INNER-JOIN">INNER JOIN</h3><p>INNER JOIN 返回两个表中满足连接条件的匹配行，以下是 INNER JOIN 语句的基本语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>column1</code>, <code>column2</code>, … 是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li><li><code>table1</code>, <code>table2</code> 是要连接的两个表的名称。</li><li><code>table1.column_name = table2.column_name</code> 是连接条件，指定了两个表中用于匹配的列。</li></ul><h4 id="实例-6">实例</h4><ol><li>多表 INNER JOIN：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> orders.order_id, customers.customer_name, products.product_name</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> customers <span class="keyword">ON</span> orders.customer_id <span class="operator">=</span> customers.customer_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> order_items <span class="keyword">ON</span> orders.order_id <span class="operator">=</span> order_items.order_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> products <span class="keyword">ON</span> order_items.product_id <span class="operator">=</span> products.product_id;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句涉及了 orders、customers、order_items 和 products 四个表的连接。它选择了订单 ID、客户名称和产品名称，连接了这些表的关联列。</p><ol start="2"><li>使用 WHERE 子句进行过滤：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> orders.order_id, customers.customer_name</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> customers <span class="keyword">ON</span> orders.customer_id <span class="operator">=</span> customers.customer_id</span><br><span class="line"><span class="keyword">WHERE</span> orders.order_date <span class="operator">&gt;=</span> <span class="string">&#x27;2023-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句在 INNER JOIN 后使用 WHERE 子句，过滤了订单日期在 ‘2023-01-01’ 及以后的订单。</p><h3 id="LEFT-JOIN">LEFT JOIN</h3><p>LEFT JOIN 返回左表的所有行，并包括右表中匹配的行，如果右表中没有匹配的行，将返回 NULL 值，以下是 LEFT JOIN 语句的基本语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure><ol><li>多表 LEFT JOIN：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.customer_id, customers.customer_name, orders.order_id, products.product_name</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> customers.customer_id <span class="operator">=</span> orders.customer_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> order_items <span class="keyword">ON</span> orders.order_id <span class="operator">=</span> order_items.order_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> products <span class="keyword">ON</span> order_items.product_id <span class="operator">=</span> products.product_id;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句连接了 customers、orders、order_items 和 products 四个表，并选择了客户 ID、客户名称、订单 ID 和产品名称。左连接保证了即使在 order_items 或 products 中没有匹配的行，仍然会返回客户和订单的信息。</p><ol start="2"><li>使用 WHERE 子句进行过滤：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.customer_id, customers.customer_name, orders.order_id</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> customers.customer_id <span class="operator">=</span> orders.customer_id</span><br><span class="line"><span class="keyword">WHERE</span> orders.order_date <span class="operator">&gt;=</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">OR</span> orders.order_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句在 LEFT JOIN 后使用 WHERE 子句，过滤了订单日期在 ‘2023-01-01’ 及以后的订单，以及没有匹配订单的客户。</p><p>LEFT JOIN 是一种常用的连接类型，尤其在需要返回左表中所有行的情况下。当右表中没有匹配的行时，相关列将显示为 NULL。在使用 LEFT JOIN 时，请确保理解连接条件并根据需求过滤结果。</p><h3 id="RIGHT-JOIN">RIGHT JOIN</h3><p>在开发过程中中，RIGHT JOIN 并不经常使用，因为它可以用 LEFT JOIN 和表的顺序交换来实现相同的效果。</p><p>在实际使用中，你可以根据个人偏好或组织规范选择使用哪种形式。</p><h2 id="NULL-值处理">NULL 值处理</h2><p>我们已经知道 MySQL 使用 <strong>SELECT</strong> 命令及 <strong>WHERE</strong> 子句来读取数据表中的数据，但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作。</p><p>在 MySQL 中，NULL 用于表示缺失的或未知的数据，处理 NULL 值需要特别小心，因为在数据库中它可能会导致不同于预期的结果。</p><p>为了处理这种情况，MySQL提供了三大运算符:</p><ul><li><strong>IS NULL:</strong> 当列的值是 NULL,此运算符返回 true。</li><li><strong>IS NOT NULL:</strong> 当列的值不为 NULL, 运算符返回 true。</li><li><strong>&lt;=&gt;:</strong> 比较操作符（不同于 = 运算符），当比较的的两个值相等或者都为 NULL 时返回 true。</li></ul><p>关于 NULL 的条件比较运算是比较特殊的。你不能使用 = NULL 或 != NULL 在列中查找 NULL 值 。</p><p>在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 NULL，即 NULL = NULL 返回 NULL 。</p><p>MySQL 中处理 NULL 使用 IS NULL 和 IS NOT NULL 运算符。</p><blockquote><p><strong>注意</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * , columnName1+ifnull(columnName2,0) from tableName;</span><br></pre></td></tr></table></figure><p>columnName1，columnName2 为 int 型，当 columnName2 中，有值为 null 时，columnName1+columnName2=null， ifnull(columnName2,0) 把 columnName2 中 null 值转为 0。</p></blockquote><h3 id="常见注意事项和技巧">常见注意事项和技巧</h3><ol><li>检查是否为 NULL：</li></ol><p>要检查某列是否为 NULL，可以使用 IS NULL 或 IS NOT NULL 条件。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>;</span><br></pre></td></tr></table></figure><p>使用 COALESCE 函数处理 NULL：</p><ol start="2"><li>COALESCE 函数可以用于替换为 NULL 的值，它接受多个参数，返回参数列表中的第一个非 NULL 值：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, <span class="built_in">COALESCE</span>(stock_quantity, <span class="number">0</span>) <span class="keyword">AS</span> actual_quantity</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句中，如果 stock_quantity 列为 NULL，则 COALESCE 将返回 0。</p><ol start="3"><li>使用 IFNULL 函数处理 NULL：</li></ol><p>IFNULL 函数是 COALESCE 的 MySQL 特定版本，它接受两个参数，如果第一个参数为 NULL，则返回第二个参数。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, IFNULL(stock_quantity, <span class="number">0</span>) <span class="keyword">AS</span> actual_quantity</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure><ol start="4"><li>NULL 排序：</li></ol><p>在使用 ORDER BY 子句进行排序时，NULL 值默认会被放在排序的最后。如果希望将 NULL 值放在最前面，可以使用 ORDER BY column_name ASC NULLS FIRST，反之使用 ORDER BY column_name DESC NULLS LAST。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">ASC</span> <span class="keyword">NULLS FIRST</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>使用 &lt;=&gt; 操作符进行 NULL 比较：</li></ol><p>&lt;=&gt; 操作符是 MySQL 中用于比较两个表达式是否相等的特殊操作符，对于 NULL 值的比较也会返回 TRUE。它可以用于处理 NULL 值的等值比较。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><ol start="6"><li>注意聚合函数对 NULL 的处理：</li></ol><p>在使用聚合函数（如 COUNT, SUM, AVG）时，它们会忽略 NULL 值，因此可能会得到不同于预期的结果。如果希望将 NULL 视为 0，可以使用 COALESCE 或 IFNULL。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="built_in">COALESCE</span>(salary, <span class="number">0</span>)) <span class="keyword">AS</span> avg_salary <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>这样即使 salary 为 NULL，聚合函数也会将其视为 0。</p><blockquote><p><em>处理 NULL 值时，要特别小心确保查询和操作的语义符合预期。在设计表结构时，也需要考虑 NULL 值的使用场景和合理性。</em></p></blockquote><h2 id="正则表达式">正则表达式</h2><p>我们了解过 MySQL 可以通过 <strong>LIKE …%</strong> 来进行模糊匹配。</p><p>MySQL 同样也支持其他正则表达式的匹配， MySQL 中使用 <strong>REGEXP</strong> 和 <strong>RLIKE</strong>操作符来进行正则表达式匹配。</p><p>下表中的正则模式可应用于 REGEXP 操作符中。</p><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">^</td><td style="text-align:left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td style="text-align:left">.</td><td style="text-align:left">匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像 ‘[.\n]’ 的模式。</td></tr><tr><td style="text-align:left">[…]</td><td style="text-align:left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td style="text-align:left">[^…]</td><td style="text-align:left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。</td></tr><tr><td style="text-align:left">p1|p2|p3</td><td style="text-align:left">匹配 p1 或 p2 或 p3。例如，‘z|food’ 能匹配 “z” 或 “food”。‘(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">匹配前面的子表达式一次或多次。例如，‘zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td style="text-align:left">{n}</td><td style="text-align:left">n 是一个非负整数。匹配确定的 n 次。例如，‘o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td style="text-align:left">{n,m}</td><td style="text-align:left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td></tr></tbody></table><h3 id="正则表达式匹配的字符类">正则表达式匹配的字符类</h3><ul><li><code>.</code>：匹配任意单个字符。</li><li><code>^</code>：匹配字符串的开始。</li><li><code>$</code>：匹配字符串的结束。</li><li><code>*</code>：匹配零个或多个前面的元素。</li><li><code>+</code>：匹配一个或多个前面的元素。</li><li><code>?</code>：匹配零个或一个前面的元素。</li><li><code>[abc]</code>：匹配字符集中的任意一个字符。</li><li><code>[^abc]</code>：匹配除了字符集中的任意一个字符以外的字符。</li><li><code>[a-z]</code>：匹配范围内的任意一个小写字母。</li><li><code>[0-9]</code>：匹配一个数字字符。</li><li><code>\w</code>：匹配一个字母数字字符（包括下划线）。</li><li><code>\s</code>：匹配一个空白字符。</li></ul><h3 id="使用-REGEXP-进行模式匹配">使用 REGEXP 进行模式匹配</h3><p>REGEXP 是用于进行正则表达式匹配的运算符。</p><p>REGEXP 用于检查一个字符串是否匹配指定的正则表达式模式，以下是 REGEXP 运算符的基本语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name REGEXP <span class="string">&#x27;pattern&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>column1</code>, <code>column2</code>, … 是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li><li><code>table_name</code> 是你要从中查询数据的表的名称。</li><li><code>column_name</code> 是你要进行正则表达式匹配的列的名称。</li><li><code>'pattern'</code> 是一个正则表达式模式。</li></ul><p>查找 name 字段中以 <strong>‘st’</strong> 为开头的所有数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^st&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查找 name 字段中以 <strong>‘ok’</strong> 为结尾的所有数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;ok$&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查找 name 字段中包含 <strong>‘mar’</strong> 字符串的所有数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;mar&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查找 name 字段中以元音字符开头或以 <strong>‘ok’</strong> 字符串结尾的所有数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^[aeiou]|ok$&#x27;</span>;</span><br></pre></td></tr></table></figure><p>选择订单表中描述中包含 “item” 后跟一个或多个数字的记录。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_description REGEXP <span class="string">&#x27;item[0-9]+&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用 <strong>BINARY</strong> 关键字，使得匹配区分大小写：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> product_name REGEXP <span class="type">BINARY</span> <span class="string">&#x27;apple&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用 OR 进行多个匹配条件，以下将选择姓氏为 “Smith” 或 “Johnson” 的员工记录：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;Smith|Johnson&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="使用-RLIKE-进行模式匹配">使用 RLIKE 进行模式匹配</h3><p>RLIKE 是 MySQL 中用于进行正则表达式匹配的运算符，与 REGEXP 是一样的，RLIKE 和 REGEXP 可以互换使用，没有区别。</p><h2 id="事务">事务</h2><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p><p>在 MySQL 中，事务是一组SQL语句的执行，它们被视为一个单独的工作单元。</p><ul><li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li><li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li><li>事务用来管理 <strong>insert、update、delete</strong> 语句</li></ul><p>一般来说，事务是必须满足4个条件（ACID）：：原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability）。</p><ul><li>**原子性：**一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li>**一致性：**在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li>**隔离性：**数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li>**持久性：**事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><blockquote><p>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</p></blockquote><h3 id="事务控制语句：">事务控制语句：</h3><ul><li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li><li>COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li><li>ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li><li>SAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</li><li>RELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li><li>ROLLBACK TO identifier 把事务回滚到标记点；</li><li>SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</li></ul><p><img src="D:%5CCode%5Cgithub%5Cblog-images%5Carchive%5C1-1749401472918-4.webp" alt="img"></p><h3 id="MYSQL-事务处理主要有两种方法：">MYSQL 事务处理主要有两种方法：</h3><p>1、用 BEGIN, ROLLBACK, COMMIT 来实现</p><ul><li><strong>BEGIN 或 START TRANSACTION</strong>：开用于开始一个事务。</li><li><strong>ROLLBACK</strong> 事务回滚，取消之前的更改。</li><li><strong>COMMIT</strong>：事务确认，提交事务，使更改永久生效。</li></ul><p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p><ul><li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li><li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li></ul><p><strong>BEGIN 或 START TRANSACTION</strong> – 用于开始一个事务：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>; <span class="comment">-- 或者使用 START TRANSACTION;</span></span><br></pre></td></tr></table></figure><p><strong>COMMIT</strong> – 用于提交事务，将所有的修改永久保存到数据库：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p><strong>ROLLBACK</strong> – 用于回滚事务，撤销自上次提交以来所做的所有更改：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><p><strong>SAVEPOINT</strong> – 用于在事务中设置保存点，以便稍后能够回滚到该点：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure><p><strong>ROLLBACK TO SAVEPOINT</strong> – 用于回滚到之前设置的保存点：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure><p><strong>举例</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开始事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行一些SQL语句</span></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 判断是否要提交还是回滚</span></span><br><span class="line">IF (条件) <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span>; <span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">END</span> IF;</span><br></pre></td></tr></table></figure><p><strong>实例</strong>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE TABLE</span> runoob_transaction_test( id <span class="type">int</span>(<span class="number">5</span>)) engine<span class="operator">=</span>innodb;  # 创建数据表</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.04</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> runoob_transaction_test;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;  # 开始事务</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert into</span> runoob_transaction_test <span class="keyword">value</span>(<span class="number">5</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert into</span> runoob_transaction_test <span class="keyword">value</span>(<span class="number">6</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>; # 提交事务</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> runoob_transaction_test;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;    # 开始事务</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">insert into</span> runoob_transaction_test <span class="keyword">values</span>(<span class="number">7</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;   # 回滚</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span>   <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> runoob_transaction_test;   # 因为回滚所以数据没有插入</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ALTER-命令">ALTER 命令</h2><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到 MySQL <strong>ALTER</strong> 命令。</p><p>MySQL 的 <strong>ALTER</strong> 命令用于修改数据库、表和索引等对象的结构。</p><p><strong>ALTER</strong> 命令允许你添加、修改或删除数据库对象，并且可以用于更改表的列定义、添加约束、创建和删除索引等操作。</p><p>ALTER 命令非常强大，可以在数据库结构发生变化时进行灵活的修改和调整。</p><p>以下是 <strong>ALTER</strong> 命令的常见用法和实例：</p><ol><li><h3 id="添加列">添加列</h3></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> new_column_name datatype;</span><br></pre></td></tr></table></figure><ol start="2"><li><h3 id="修改列的数据类型">修改列的数据类型</h3></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> TABLE_NAME</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> column_name new_datatype;</span><br></pre></td></tr></table></figure><ol start="3"><li><h3 id="修改列名">修改列名</h3></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name</span><br><span class="line">CHANGE <span class="keyword">COLUMN</span> old_column_name new_column_name datatype;</span><br></pre></td></tr></table></figure><ol start="4"><li><h3 id="删除列">删除列</h3></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name;</span><br></pre></td></tr></table></figure><ol start="5"><li><h3 id="添加-PRIMARY-KEY">添加 PRIMARY KEY</h3></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span> (column_name);</span><br></pre></td></tr></table></figure><ol start="6"><li><h3 id="添加-FOREIGN-KEY">添加 FOREIGN KEY</h3></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> child_table</span><br><span class="line"><span class="keyword">ADD CONSTRAINT</span> fk_name</span><br><span class="line"><span class="keyword">FOREIGN KEY</span> (column_name)</span><br><span class="line"><span class="keyword">REFERENCES</span> parent_table (column_name);</span><br></pre></td></tr></table></figure><ol start="7"><li><h3 id="修改表名">修改表名</h3></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> old_table_name</span><br><span class="line">RENAME <span class="keyword">TO</span> new_table_name;</span><br></pre></td></tr></table></figure><h3 id="修改字段类型及名称">修改字段类型及名称</h3><p>如果需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</p><p>例如，把字段 c 的类型从 CHAR(1) 改为 CHAR(10)，可以执行以下命令:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl MODIFY c <span class="type">CHAR</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。尝试如下实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl CHANGE i j <span class="type">BIGINT</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl CHANGE j j <span class="type">INT</span>;</span><br></pre></td></tr></table></figure><h3 id="ALTER-TABLE-对-Null-值和默认值的影响">ALTER TABLE 对 Null 值和默认值的影响</h3><p>当你修改字段时，你可以指定是否包含值或者是否设置默认值。</p><p>以下实例，指定字段 j 为 NOT NULL 且默认值为 100。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> MODIFY j <span class="type">BIGINT</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>如果你不设置默认值，MySQL会自动设置该字段默认为 NULL。</p><h3 id="修改字段默认值">修改字段默认值</h3><p>你可以使用 ALTER 来修改字段的默认值，尝试以下实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl <span class="keyword">ALTER</span> i <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="number">1000</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> testalter_tbl;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type    <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> c     <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> i     <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">1000</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>你也可以使用 ALTER 命令及 DROP子句来删除字段的默认值，如下实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl <span class="keyword">ALTER</span> i <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> testalter_tbl;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type    <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> c     <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> i     <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">Changing a <span class="keyword">Table</span> Type:</span><br></pre></td></tr></table></figure><h2 id="索引">索引</h2><p>MySQL 索引是一种数据结构，用于加快数据库查询的速度和性能。</p><p>MySQL 索引的建立对于 MySQL 的高效运行是很重要的，索引可以大大提高 MySQL 的检索速度。</p><blockquote><p>MySQL 索引类似于书籍的索引，通过存储指向数据行的指针，可以快速定位和访问表中的特定数据。</p><p>打个比方，如果合理的设计且使用索引的 MySQL 是一辆兰博基尼的话，那么没有设计和使用索引的 MySQL 就是一个人力三轮车。</p><p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。</p></blockquote><p>索引分单列索引和组合索引：</p><ul><li>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引。</li><li>组合索引，即一个索引包含多个列。</li></ul><p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。</p><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p><p>索引虽然能够提高查询性能，但也需要注意以下几点：</p><ul><li>索引需要占用额外的存储空间。</li><li>对表进行插入、更新和删除操作时，索引需要维护，可能会影响性能。</li><li>过多或不合理的索引可能会导致性能下降，因此需要谨慎选择和规划索引。</li></ul><h3 id="普通索引">普通索引</h3><p>索引能够显著提高查询的速度，尤其是在大型表中进行搜索时。通过使用索引，MySQL 可以直接定位到满足查询条件的数据行，而无需逐行扫描整个表。</p><h4 id="创建索引">创建索引</h4><p>使用 <strong>CREATE INDEX</strong> 语句可以创建普通索引。</p><p>普通索引是最常见的索引类型，用于加速对表中数据的查询。</p><p><strong>CREATE INDEX</strong> 的语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column1 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], column2 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...);</span><br></pre></td></tr></table></figure><ul><li><code>CREATE INDEX</code>: 用于创建普通索引的关键字。</li><li><code>index_name</code>: 指定要创建的索引的名称。索引名称在表中必须是唯一的。</li><li><code>table_name</code>: 指定要在哪个表上创建索引。</li><li><code>(column1, column2, ...)</code>: 指定要索引的表列名。你可以指定一个或多个列作为索引的组合。这些列的数据类型通常是数值、文本或日期。</li><li><code>ASC</code>和<code>DESC</code>（可选）: 用于指定索引的排序顺序。默认情况下，索引以升序（ASC）排序。</li></ul><p>以下实例假设我们有一个名为 students 的表，包含 id、name 和 age 列，我们将在 name 列上创建一个普通索引。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> students (name);</span><br></pre></td></tr></table></figure><p>上述语句将在 students 表的 name 列上创建一个名为 idx_name 的普通索引，这将有助于提高通过姓名进行搜索的查询性能。</p><p>需要注意的是，如果表中的数据量较大，索引的创建可能会花费一些时间，但一旦创建完成，查询性能将会显著提高。</p><h4 id="修改表结构-添加索引">修改表结构(添加索引)</h4><p>我们可以使用 <strong>ALTER TABLE</strong> 命令可以在已有的表中创建索引。</p><p>ALTER TABLE 允许你修改表的结构，包括添加、修改或删除索引。</p><p>ALTER TABLE 创建索引的语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> INDEX index_name (column1 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], column2 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...);</span><br></pre></td></tr></table></figure><ul><li><code>ALTER TABLE</code>: 用于修改表结构的关键字。</li><li><code>table_name</code>: 指定要修改的表的名称。</li><li><code>ADD INDEX</code>: 添加索引的子句。<code>ADD INDEX</code>用于创建普通索引。</li><li><code>index_name</code>: 指定要创建的索引的名称。索引名称在表中必须是唯一的。</li><li><code>(column1, column2, ...)</code>: 指定要索引的表列名。你可以指定一个或多个列作为索引的组合。这些列的数据类型通常是数值、文本或日期。</li><li><code>ASC</code>和<code>DESC</code>（可选）: 用于指定索引的排序顺序。默认情况下，索引以升序（ASC）排序。</li></ul><p>下面是一个实例，我们将在已存在的名为 employees 的表上创建一个普通索引:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> employees</span><br><span class="line"><span class="keyword">ADD</span> INDEX idx_age (age);</span><br></pre></td></tr></table></figure><p>上述语句将在 employees 表的 age 列上创建一个名为 idx_age 的普通索引。</p><h4 id="创建表的时候直接指定">创建表的时候直接指定</h4><p>我们可以在创建表的时候，你可以在 <strong>CREATE TABLE</strong> 语句中直接指定索引，以创建表和索引的组合。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> table_name (</span><br><span class="line">  column1 data_type,</span><br><span class="line">  column2 data_type,</span><br><span class="line">  ...,</span><br><span class="line">  INDEX index_name (column1 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], column2 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>CREATE TABLE</code>: 用于创建新表的关键字。</li><li><code>table_name</code>: 指定要创建的表的名称。</li><li><code>(column1 data_type, column2 data_type, ...)</code>: 定义表的列名和数据类型。你可以指定一个或多个列作为索引的组合。这些列的数据类型通常是数值、文本或日期。</li><li><code>INDEX</code>: 用于创建普通索引的关键字。</li><li><code>index_name</code>: 指定要创建的索引的名称。索引名称在表中必须是唯一的。</li><li><code>(column1, column2, ...)</code>: 指定要索引的表列名。你可以指定一个或多个列作为索引的组合。这些列的数据类型通常是数值、文本或日期。</li><li><code>ASC</code>和<code>DESC</code>（可选）: 用于指定索引的排序顺序。默认情况下，索引以升序（ASC）排序。</li></ul><p>下面是一个实例，我们要创建一个名为 students 的表，并在 age 列上创建一个普通索引。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> students (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  INDEX idx_age (age)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在上述实例中，我们在 students 表的 age 列上创建了一个名为 idx_age 的普通索引。</p><h4 id="删除索引">删除索引</h4><p>我们可以使用 <strong>DROP INDEX</strong> 语句来删除索引。</p><p>DROP INDEX 的语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name;</span><br></pre></td></tr></table></figure><ul><li><code>DROP INDEX</code>: 用于删除索引的关键字。</li><li><code>index_name</code>: 指定要删除的索引的名称。</li><li><code>ON table_name</code>: 指定要在哪个表上删除索引。</li></ul><p>使用 <strong>ALTER TABLE</strong> 语句删除索引的语法如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name</span><br><span class="line"><span class="keyword">DROP</span> INDEX index_name;</span><br></pre></td></tr></table></figure><ul><li><code>ALTER TABLE</code>: 用于修改表结构的关键字。</li><li><code>table_name</code>: 指定要修改的表的名称。</li><li><code>DROP INDEX</code>: 用于删除索引的子句。</li><li><code>index_name</code>: 指定要删除的索引的名称。</li></ul><p>以下实例假设我们有一个名为 employees 的表，并在 age 列上有一个名为 idx_age 的索引，现在我们要删除这个索引：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX idx_age <span class="keyword">ON</span> employees;</span><br></pre></td></tr></table></figure><p>或使用 <strong>ALTER TABLE</strong> 语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> employees</span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_age;</span><br></pre></td></tr></table></figure><p>这两个命令都会从 employees 表中删除名为 idx_age 的索引。</p><p>如果该索引不存在，执行命令时会产生错误。因此，在删除索引之前最好确认该索引是否存在，或者使用错误处理机制来处理可能的错误情况。</p><h3 id="唯一索引">唯一索引</h3><p>在 MySQL 中，你可以使用 <strong>CREATE UNIQUE INDEX</strong> 语句来创建唯一索引。</p><p>唯一索引确保索引中的值是唯一的，不允许有重复值。</p><h4 id="创建索引-2">创建索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column1 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], column2 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...);</span><br></pre></td></tr></table></figure><ul><li><code>CREATE UNIQUE INDEX</code>: 用于创建唯一索引的关键字组合。</li><li><code>index_name</code>: 指定要创建的唯一索引的名称。索引名称在表中必须是唯一的。</li><li><code>table_name</code>: 指定要在哪个表上创建唯一索引。</li><li><code>(column1, column2, ...)</code>: 指定要索引的表列名。你可以指定一个或多个列作为索引的组合。这些列的数据类型通常是数值、文本或日期。</li><li><code>ASC</code>和<code>DESC</code>（可选）: 用于指定索引的排序顺序。默认情况下，索引以升序（ASC）排序。</li></ul><p>以下是一个创建唯一索引的实例： 假设我们有一个名为 employees的 表，包含 id 和 email 列，现在我们想在email列上创建一个唯一索引，以确保每个员工的电子邮件地址都是唯一的。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_email <span class="keyword">ON</span> employees (email);</span><br></pre></td></tr></table></figure><p>以上实例将在 employees 表的 email 列上创建一个名为 idx_email 的唯一索引。</p><h4 id="修改表结构添加索引">修改表结构添加索引</h4><p>我们可以使用 <strong>ALTER TABLE</strong> 命令来创建唯一索引。</p><p><strong>ALTER TABLE</strong>命令允许你修改已经存在的表结构，包括添加新的索引。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER table</span> table_name </span><br><span class="line"><span class="keyword">ADD CONSTRAINT</span> unique_constraint_name <span class="keyword">UNIQUE</span> (column1, column2, ...);</span><br></pre></td></tr></table></figure><ul><li><code>ALTER TABLE</code>: 用于修改表结构的关键字。</li><li><code>table_name</code>: 指定要修改的表的名称。</li><li><code>ADD CONSTRAINT</code>: 这是用于添加约束（包括唯一索引）的关键字。</li><li><code>unique_constraint_name </code>: 指定要创建的唯一索引的名称，约束名称在表中必须是唯一的。</li><li><code>UNIQUE (column1, column2, ...)</code>: 指定要索引的表列名。你可以指定一个或多个列作为索引的组合。这些列的数据类型通常是数值、文本或日期。</li></ul><p>以下是一个使用 <strong>ALTER TABLE</strong> 命令创建唯一索引的实例：假设我们有一个名为 employees 的表，包含 id 和 email 列，现在我们想在 email 列上创建一个唯一索引，以确保每个员工的电子邮件地址都是唯一的。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> employees</span><br><span class="line"><span class="keyword">ADD CONSTRAINT</span> idx_email <span class="keyword">UNIQUE</span> (email);</span><br></pre></td></tr></table></figure><p>以上实例将在 employees 表的 email 列上创建一个名为 idx_email 的唯一索引。</p><p>请注意，如果表中已经有重复的 email 值，那么添加唯一索引将会失败。在创建唯一索引之前，你可能需要确保表中的 email 列没有重复的值。</p><h4 id="创建表的时候直接指定-2">创建表的时候直接指定</h4><p>我们也可以在创建表的同时，你可以在 <strong>CREATE TABLE</strong> 语句中使用 <strong>UNIQUE</strong> 关键字来创建唯一索引。</p><p>这将在表创建时同时定义唯一索引约束。</p><p><strong>CREATE TABLE</strong> 语句中创建唯一索引的语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">  column1 data_type,</span><br><span class="line">  column2 data_type,</span><br><span class="line">  ...,</span><br><span class="line">  CONSTRAINT index_name UNIQUE (column1 [ASC|DESC], column2 [ASC|DESC], ...)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>CREATE TABLE</code>: 用于创建新表的关键字。</li><li><code>table_name</code>: 指定要创建的表的名称。</li><li><code>(column1 data_type, column2 data_type, ...)</code>: 定义表的列名和数据类型。你可以指定一个或多个列作为索引的组合。这些列的数据类型通常是数值、文本或日期。</li><li><code>CONSTRAINT</code>: 用于添加约束的关键字。</li><li><code>index_name</code>: 指定要创建的唯一索引的名称。约束名称在表中必须是唯一的。</li><li><code>UNIQUE (column1, column2, ...)</code>: 指定要索引的表列名。</li><li><code>ASC</code>和<code>DESC</code>（可选）: 用于指定索引的排序顺序。默认情况下，索引以升序（ASC）排序。</li></ul><p>以下是一个在创建表时创建唯一索引的实例：假设我们要创建一个名为 employees 的表，其中包含 id、name 和 email 列，我们希望 email 列的值是唯一的，因此我们要在创建表时定义唯一索引。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> employees (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在这个例子中，email 列被定义为唯一索引，因为在它的后面加上了 UNIQUE 关键字。</p><p>请注意，使用 <strong>UNIQUE</strong> 关键字后，索引名称将自动生成，你也可以根据需要指定索引名称。</p><h3 id="使用ALTER命令添加和删除索引">使用ALTER命令添加和删除索引</h3><p>有四种方式来添加数据表的索引：</p><ul><li><p>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list):</p><p>该语句添加一个主键，主键列中的值必须唯一，主键的列的列表，可以是一个或多个列，不能包含 NULL 值。</p></li><li><p><strong>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list):</strong> 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</p></li><li><p><strong>ALTER TABLE tbl_name ADD INDEX index_name (column_list):</strong> 添加普通索引，索引值可出现多次。</p></li><li><p>**ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):**该语句指定了索引为 FULLTEXT ，用于全文索引。</p></li></ul><p>以下实例为在表中添加索引。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl <span class="keyword">ADD</span> INDEX (c);</span><br></pre></td></tr></table></figure><p>你还可以在 ALTER 命令中使用 DROP 子句来删除索引。尝试以下实例删除索引:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl <span class="keyword">DROP</span> INDEX c;</span><br></pre></td></tr></table></figure><h3 id="使用ALTER命令添加和删除主键">使用ALTER命令添加和删除主键</h3><p>主键作用于列上（可以一个列或多个列联合主键），添加主键时，你需要确保该主键默认不为空（NOT NULL）。实例如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl MODIFY i <span class="type">INT</span> <span class="keyword">NOT NULL</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl <span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span> (i);</span><br></pre></td></tr></table></figure><p>你也可以使用 ALTER 命令删除主键：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> testalter_tbl <span class="keyword">DROP</span> <span class="keyword">PRIMARY KEY</span>;</span><br></pre></td></tr></table></figure><p>删除主键时只需指定 PRIMARY KEY，但在删除索引时，你必须知道索引名。</p><h3 id="显示索引信息">显示索引信息</h3><p>你可以使用 <strong>SHOW INDEX</strong> 命令来列出表中的相关的索引信息。</p><p>可以通过添加 <strong>\G</strong> 来格式化输出信息。</p><p><strong>SHOW INDEX</strong> 语句：:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name\G</span><br><span class="line">........</span><br></pre></td></tr></table></figure><ul><li><code>SHOW INDEX</code>: 用于显示索引信息的关键字。</li><li><code>FROM table_name</code>: 指定要查看索引信息的表的名称。</li><li><code>\G</code>: 格式化输出信息。</li></ul><p>执行上述命令后，将会显示指定表中所有索引的详细信息，包括索引名称（Key_name）、索引列（Column_name）、是否是唯一索引（Non_unique）、排序方式（Collation）、索引的基数（Cardinality）等。</p><h2 id="临时表">临时表</h2><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。</p><p>临时表只在当前连接可见，当关闭连接时，MySQL 会自动删除表并释放所有空间。</p><p>在 MySQL 中，临时表是一种在当前会话中存在的表，它在会话结束时会自动被销毁。</p><p>如果你使用了其他 MySQL 客户端程序连接 MySQL 数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p><h3 id="创建临时表">创建临时表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_table_name (</span><br><span class="line">  column1 datatype,</span><br><span class="line">  column2 datatype,</span><br><span class="line">  ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>或者简写为：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_table_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> source_table</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h3 id="插入数据-2">插入数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> temp_table_name (column1, column2, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, ...);</span><br></pre></td></tr></table></figure><h3 id="查询临时表">查询临时表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> temp_table_name;</span><br></pre></td></tr></table></figure><h3 id="修改临时表">修改临时表</h3><p>临时表的修改操作与普通表类似，可以使用 ALTER TABLE 命令。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> temp_table_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> new_column datatype;</span><br></pre></td></tr></table></figure><h3 id="删除临时表">删除临时表</h3><p>临时表在会话结束时会自动被销毁，但你也可以使用 DROP TABLE 明确删除它。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> TEMPORARY <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> temp_table_name;</span><br></pre></td></tr></table></figure><p>临时表对于需要在某个会话中存储中间结果集或进行复杂查询时非常有用。</p><p>临时表的作用范围仅限于创建它的会话。其他会话无法直接访问或引用该临时表。在多个会话之间共享数据时，可以考虑使用普通表而不是临时表。</p><p>请注意，临时表在会话结束时会被自动删除，但也可以使用 DROP TEMPORARY TABLE 明确删除它，这样可以更早地释放资源。</p><h2 id="复制表">复制表</h2><p>如果我们需要完全的复制 MySQL 的数据表，包括表的结构，索引，默认值等。</p><p>如果仅仅使用 <strong>CREATE TABLE … SELECT</strong> 命令，是无法实现的。</p><p>本章节将为大家介绍如何完整的复制 MySQL 数据表，步骤如下：</p><ul><li>使用 <strong>SHOW CREATE TABLE</strong> 命令获取创建数据表(<strong>CREATE TABLE</strong>) 语句，该语句包含了原数据表的结构，索引等。</li><li></li><li>复制以下命令显示的 SQL 语句，修改数据表名，并执行SQL语句，通过以上命令 将完全的复制数据表结构。</li><li>如果你想复制表的内容，你就可以使用 <strong>INSERT INTO … SELECT</strong> 语句来实现。</li></ul><p><strong>步骤一：</strong></p><p>获取数据表的完整结构。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">CREATE TABLE</span> runoob_tbl \G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">       <span class="keyword">Table</span>: runoob_tbl</span><br><span class="line"><span class="keyword">Create Table</span>: <span class="keyword">CREATE TABLE</span> `runoob_tbl` (</span><br><span class="line">  `runoob_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> auto_increment,</span><br><span class="line">  `runoob_title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `runoob_author` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT NULL</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `submission_date` <span class="type">date</span> <span class="keyword">default</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span>  (`runoob_id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `AUTHOR_INDEX` (`runoob_author`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB </span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line"><span class="keyword">No</span> query specified</span><br></pre></td></tr></table></figure><p><strong>步骤二：</strong></p><p>修改 SQL 语句的数据表名，并执行 SQL 语句。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE TABLE</span> `clone_tbl` (</span><br><span class="line">  <span class="operator">-</span><span class="operator">&gt;</span> `runoob_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> auto_increment,</span><br><span class="line">  <span class="operator">-</span><span class="operator">&gt;</span> `runoob_title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="operator">-</span><span class="operator">&gt;</span> `runoob_author` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT NULL</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="operator">-</span><span class="operator">&gt;</span> `submission_date` <span class="type">date</span> <span class="keyword">default</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PRIMARY KEY</span>  (`runoob_id`),</span><br><span class="line">  <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">UNIQUE</span> KEY `AUTHOR_INDEX` (`runoob_author`)</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> ) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">1.80</span> sec)</span><br></pre></td></tr></table></figure><p><strong>步骤三：</strong></p><p>执行完第二步骤后，你将在数据库中创建新的克隆表 clone_tbl。 如果你想拷贝数据表的数据你可以使用 <strong>INSERT INTO… SELECT</strong> 语句来实现。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT INTO</span> clone_tbl (runoob_id,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>                        runoob_title,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>                        runoob_author,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>                        submission_date)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> runoob_id,runoob_title,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>        runoob_author,submission_date</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> runoob_tbl;</span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">3</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>执行以上步骤后，会完整的复制表的内容，包括表结构及表数据。</p><h3 id="使用-mtsqldump-命令">使用 mtsqldump 命令</h3><p>mysqldump 命令可以用于备份和还原 MySQL 数据库。</p><p>如果你只想复制一张表，你可以使用 mysqldump 导出该表的结构和数据，然后再导入到新的数据库或新的表中。</p><p>以下是一个简单的实例。</p><p>备份表数据：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p dbname old_table &gt; old_table_dump.sql</span><br></pre></td></tr></table></figure><p>这将导出名为 old_table 的表的结构和数据到一个名为 old_table_dump.sql 的 SQL 文件。</p><p>你需要提供 MySQL 用户名和密码，并替换 username、dbname 和 old_table 为实际的值。</p><p>还原到新的数据库：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u username -p new_dbname &lt; old_table_dump.sql</span><br></pre></td></tr></table></figure><p>这将在新的数据库（new_dbname）中创建一个名为 old_table 的表，并将之前导出的结构和数据导入到新表中。</p><h2 id="元数据">元数据</h2><p>MySQL 元数据是关于数据库和其对象（如表、列、索引等）的信息。</p><p>元数据存储在系统表中，这些表位于 MySQL 数据库的 information_schema 数据库中，通过查询这些系统表，你可以获取关于数据库结构、对象和其他相关信息的详细信息。</p><p>你可能想知道MySQL以下三种信息：</p><ul><li><strong>查询结果信息：</strong> SELECT, UPDATE 或 DELETE语句影响的记录数。</li><li><strong>数据库和数据表的信息：</strong> 包含了数据库及数据表的结构信息。</li><li><strong>MySQL 服务器信息：</strong> 包含了数据库服务器的当前状态，版本号等。</li></ul><p>以下是一些常用的 MySQL 元数据查询：</p><p>查看所有数据库：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>选择数据库：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE database_name;</span><br></pre></td></tr></table></figure><p>查看数据库中的所有表：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p>查看表的结构：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> table_name;</span><br></pre></td></tr></table></figure><p>查看表的索引：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>查看表的创建语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE TABLE</span> table_name;</span><br></pre></td></tr></table></figure><p>查看表的行数：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>查看列的信息：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COLUMN_NAME, DATA_TYPE, IS_NULLABLE, COLUMN_KEY</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;your_table_name&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上SQL 语句中的 ‘your_database_name’ 和 ‘your_table_name’ 分别是你的数据库名和表名。</p><p>查看外键信息：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    TABLE_NAME,</span><br><span class="line">    COLUMN_NAME,</span><br><span class="line">    CONSTRAINT_NAME,</span><br><span class="line">    REFERENCED_TABLE_NAME,</span><br><span class="line">    REFERENCED_COLUMN_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    INFORMATION_SCHEMA.KEY_COLUMN_USAGE</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span></span><br><span class="line">    <span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;your_table_name&#x27;</span></span><br><span class="line">    <span class="keyword">AND</span> REFERENCED_TABLE_NAME <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>;</span><br></pre></td></tr></table></figure><p>请替换上述 SQL 语句中的 ‘your_database_name’ 和 ‘your_table_name’ 为实际的数据库名和表名。</p><hr><h2 id="information-schema-数据库">information_schema 数据库</h2><p>information_schema 是 MySQL 数据库中的一个系统数据库，它包含有关数据库服务器的元数据信息，这些信息以表的形式存储在 information_schema 数据库中。</p><h3 id="SCHEMATA-表">SCHEMATA 表</h3><p>存储有关数据库的信息，如数据库名、字符集、排序规则等。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.SCHEMATA;</span><br></pre></td></tr></table></figure><h3 id="TABLES-表">TABLES 表</h3><p>包含有关数据库中所有表的信息，如表名、数据库名、引擎、行数等。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.TABLES <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="COLUMNS-表">COLUMNS 表</h3><p>包含有关表中列的信息，如列名、数据类型、是否允许 NULL 等。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.COLUMNS <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span> <span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;your_table_name&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="STATISTICS-表">STATISTICS 表</h3><p>提供有关表索引的统计信息，如索引名、列名、唯一性等。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.STATISTICS <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span> <span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;your_table_name&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="KEY-COLUMN-USAGE-表">KEY_COLUMN_USAGE 表</h3><p>包含有关表中外键的信息，如外键名、列名、关联表等。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.KEY_COLUMN_USAGE <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span> <span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;your_table_name&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="REFERENTIAL-CONSTRAINTS-表">REFERENTIAL_CONSTRAINTS 表</h3><p>存储有关外键约束的信息，如约束名、关联表等。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.REFERENTIAL_CONSTRAINTS <span class="keyword">WHERE</span> CONSTRAINT_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span> <span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;your_table_name&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这些表提供了丰富的元数据信息，可以用于查询数据库结构、表信息、列信息、索引信息等。</p><h2 id="序列">序列</h2><p>在 MySQL 中，序列是一种自增生成数字序列的对象，是一组整数 <strong>1、2、3、…</strong>，由于一张数据表只能有一个字段自增主键。</p><p>尽管 MySQL 本身并没有内建的序列类型，但可以使用 AUTO_INCREMENT 属性来模拟序列的行为，通常 <strong>AUTO_INCREMENT</strong> 属性用于指定表中某一列的自增性。</p><p>一个使用 AUTO_INCREMENT 创建表的例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> example_table (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>以上例子中，id 列被定义为 INT AUTO_INCREMENT，这表示每次插入一行数据时，id 列的值会自动增加。主键约束保证了 id 列的唯一性。</p><p>当你插入一行数据时，可以不指定 id 列的值，数据库会自动为其分配一个唯一的、自增的值：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> example_table (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;John&#x27;</span>);</span><br></pre></td></tr></table></figure><p>你也可以使用 LAST_INSERT_ID() 函数来获取刚刚插入的行的自增值：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LAST_INSERT_ID();</span><br></pre></td></tr></table></figure><p>如果你需要获取表的当前自增值，可以使用以下语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;example_table&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在结果集中，Auto_increment 列的值即为当前表的自增值。</p><blockquote><p>请注意，使用 AUTO_INCREMENT 属性的列只能是整数类型（通常是 INT 或 BIGINT）。此外，如果你删除表中的某一行，其自增值不会被重新使用，而是会继续递增。如果你希望手动设置自增值，可以使用 SET 语句，但这不是一种常规的做法，因为可能引起唯一性冲突。</p></blockquote><h3 id="使用-AUTO-INCREMENT">使用 AUTO_INCREMENT</h3><p>MySQL 中最简单使用序列的方法就是使用 MySQL AUTO_INCREMENT 来定义序列。</p><h3 id="获取-AUTO-INCREMENT-值">获取 AUTO_INCREMENT 值</h3><p>在 MySQL 的客户端中你可以使用 SQL 中的 LAST_INSERT_ID() 函数来获取最后的插入表中的自增列的值。</p><h3 id="重置序列">重置序列</h3><p>如果你删除了数据表中的多条记录，并希望对剩下数据的 AUTO_INCREMENT 列进行重新排列，那么你可以通过删除自增的列，然后重新添加来实现。 不过该操作要非常小心，如果在删除的同时又有新记录添加，有可能会出现数据混乱。操作如下所示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> insect <span class="keyword">DROP</span> id;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> insect</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ADD</span> id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT NULL</span> AUTO_INCREMENT <span class="keyword">FIRST</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span> (id);</span><br></pre></td></tr></table></figure><h3 id="设置序列的开始值">设置序列的开始值</h3><p>一般情况下序列的开始值为 1，但如果你需要指定一个开始值 100，那我们可以通过以下语句来实现：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE TABLE</span> insect</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PRIMARY KEY</span> (id),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT NULL</span>, </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="type">date</span> <span class="type">DATE</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> origin <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT NULL</span></span><br><span class="line">)engine<span class="operator">=</span>innodb auto_increment<span class="operator">=</span><span class="number">100</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>或者你也可以在表创建成功后，通过以下语句来实现：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> t AUTO_INCREMENT <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h2 id="处理重复数据">处理重复数据</h2><p>有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。</p><h3 id="防止表中出现重复数据">防止表中出现重复数据</h3><p>你可以在 MySQL 数据表中设置指定的字段为 <strong>PRIMARY KEY（主键）</strong> 或者 <strong>UNIQUE（唯一）</strong> 索引来保证数据的唯一性。</p><p>让我们尝试一个实例：下表中无索引及主键，所以该表允许出现多条重复记录。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">    first_name <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    last_name <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    sex <span class="type">CHAR</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果你想设置表中字段 first_name，last_name 数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为 NULL，可设置为 NOT NULL。如下所示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">   first_name <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">   last_name <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">   sex <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="keyword">PRIMARY KEY</span> (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果我们设置了唯一索引，那么在插入重复数据时，SQL 语句将无法执行成功,并抛出错。</p><p>INSERT IGNORE INTO 与 INSERT INTO 的区别就是 INSERT IGNORE INTO 会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。</p><p>以下实例使用了 INSERT IGNORE INTO，执行后不会出错，也不会向数据表中插入重复数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> person_tbl (last_name, first_name)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>( <span class="string">&#x27;Jay&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> person_tbl (last_name, first_name)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>( <span class="string">&#x27;Jay&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>INSERT IGNORE INTO 当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而 REPLACE INTO 如果存在 primary 或 unique 相同的记录，则先删除掉。再插入新记录。</p><p>另一种设置数据的唯一性方法是添加一个 UNIQUE 索引，如下所示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">   first_name <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">   last_name <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">   sex <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="keyword">UNIQUE</span> (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h3 id="统计重复数据">统计重复数据</h3><p>以下我们将统计表中 first_name 和 last_name的重复记录数：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> repetitions, last_name, first_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> person_tbl</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> last_name, first_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> repetitions <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>以上查询语句将返回 person_tbl 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：</p><ul><li>确定哪一列包含的值可能会重复。</li><li>在列选择列表使用COUNT(*)列出的那些列。</li><li>在GROUP BY子句中列出的列。</li><li>HAVING子句设置重复数大于1。</li></ul><hr><h3 id="过滤重复数据">过滤重复数据</h3><p>如果你需要读取不重复的数据可以在 SELECT 语句中使用 DISTINCT 关键字来过滤重复数据。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> last_name, first_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> person_tbl;</span><br></pre></td></tr></table></figure><p>你也可以使用 GROUP BY 来读取数据表中不重复的数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> last_name, first_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> person_tbl</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> (last_name, first_name);</span><br></pre></td></tr></table></figure><hr><h3 id="删除重复数据">删除重复数据</h3><p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE TABLE</span> tmp <span class="keyword">SELECT</span> last_name, first_name, sex <span class="keyword">FROM</span> person_tbl  <span class="keyword">GROUP</span> <span class="keyword">BY</span> (last_name, first_name, sex);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> person_tbl;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> tmp RENAME <span class="keyword">TO</span> person_tbl;</span><br></pre></td></tr></table></figure><p>当然你也可以在数据表中添加 INDEX（索引） 和 PRIMAY KEY（主键）这种简单的方法来删除表中的重复记录。方法如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> IGNORE <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span> (last_name, first_name);</span><br></pre></td></tr></table></figure><h2 id="SQL-注入">SQL 注入</h2><p>如果您通过网页获取用户输入的数据并将其插入一个 MySQL 数据库，那么就有可能发生 SQL 注入安全的问题。</p><p>所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p><p>MySQL 注入是指攻击者通过恶意构造的输入，成功地执行恶意的 SQL 查询，这通常发生在用户输入未经适当验证或转义的情况下，攻击者试图在输入中插入 SQL 代码，以执行意外的查询或破坏数据库。</p><p>我们永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。</p><p>假设有一个登录系统，用户通过输入用户名和密码进行身份验证：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;input_username&#x27;</span> <span class="keyword">AND</span> password <span class="operator">=</span> <span class="string">&#x27;input_password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果没有正确的输入验证和防范措施，攻击者可以输入类似于以下内容的用户名：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; OR &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span><span class="string">&#x27;; --</span></span><br></pre></td></tr></table></figure><p>在这种情况下，SQL 查询会变成：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span>; <span class="comment">--&#x27; AND password = &#x27;input_password&#x27;;</span></span><br></pre></td></tr></table></figure><p>这会使查询返回所有用户，因为 <strong>1=1</strong> 总是为真，注释符号 – 用于注释掉原始查询的其余部分，以确保语法正确。</p><h3 id="防范-SQL-注入：">防范 SQL 注入：</h3><ul><li><strong>使用参数化查询或预编译语句：</strong> 使用参数化查询（Prepared Statements）可以有效防止 SQL 注入，因为它们在执行查询之前将输入数据与查询语句分离。</li><li><strong>输入验证和转义：</strong> 对用户输入进行适当的验证，并使用合适的转义函数（如<code>mysqli_real_escape_string</code>）来处理输入，以防止恶意注入。</li><li><strong>最小权限原则：</strong> 给予数据库用户最小的权限，确保它们只能执行必要的操作，以降低潜在的损害。</li><li><strong>使用ORM框架：</strong> 使用对象关系映射（ORM）框架（如Hibernate、Sequelize）可以帮助抽象 SQL 查询，从而降低 SQL 注入的风险。</li><li><strong>禁用错误消息显示：</strong> 在生产环境中，禁用显示详细的错误消息，以防止攻击者获取有关数据库结构的敏感信息。</li></ul><h3 id="防止SQL注入：">防止SQL注入：</h3><ul><li><strong>1. 永远不要信任用户的输入</strong> – 对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双等进行转义等。</li><li><strong>2. 永远不要使用动态拼装 SQL</strong> – 可以使用参数化的 SQL 或者直接使用存储过程进行数据查询存取。</li><li><strong>3. 永远不要使用管理员权限的数据库连接</strong> – 为每个应用使用单独的权限有限的数据库连接。</li><li><strong>4. 不要把机密信息直接存放</strong> – 使用 hash 加密密码和敏感的信息。</li><li><strong>5. 应用的异常信息应该给出尽可能少的提示</strong> – 最好使用自定义的错误信息对原始错误信息进行包装。</li><li><strong>6. SQL 注入的检测方法一般采取辅助软件或网站平台来检测</strong> – 使用专门的漏洞扫描工具（如 sqlmap、Acunetix、Netsparker）对应用程序进行自动化的 SQL 注入检测。</li></ul><h3 id="like-语句中的注入">like 语句中的注入</h3><p>like 查询时，如果用户输入的值有 <strong>_</strong> 和 <strong>%</strong>，则会出现这种情况：用户本来只是想查询 <strong>abcd_</strong>，查询结果中却有&quot; <strong>abcd_&quot;、“abcde”、“abcdf”</strong> 等等；用户要查询 “30%”（注：百分之三十）时也会出现问题。</p><h2 id="导出数据">导出数据</h2><p>MySQL 中你可以使用 <strong>SELECT…INTO OUTFILE</strong> 语句来简单的导出数据到文本文件上。</p><h3 id="使用-SELECT-…-INTO-OUTFILE-语句导出数据">使用 SELECT … INTO OUTFILE 语句导出数据</h3><p><strong>SELECT…INTO OUTFILE</strong> 是 MySQL 中用于将查询结果导出到文件的语法。</p><p><strong>SELECT…INTO OUTFILE</strong> 允许你将查询的结果写入一个文本文件，基本的使用方法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;file_path&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> your_table</span><br><span class="line"><span class="keyword">WHERE</span> your_conditions;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>column1, column2, ...</code>: 要选择的列。</li><li><code>'file_path'</code>: 指定输出文件的路径和名称。</li><li><code>your_table</code>: 要查询的表。</li><li><code>your_conditions</code>: 查询条件。</li></ul><p>以下是一个简单的实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, email</span><br><span class="line"><span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/tmp/user_data.csv&#x27;</span></span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure><p>以上 SQL 语句中，我们从 users 表中选择了 id、name 和 email 列，并将结果写入了 /tmp/user_data.csv 文件。FIELDS TERMINATED BY ‘,’ 指定了列之间的分隔符（逗号），LINES TERMINATED BY ‘\n’ 指定了行之间的分隔符（换行符）。</p><p>需要注意的是，执行 <strong>SELECT…INTO OUTFILE</strong> 需要相应的权限，并且输出文件的目录需要是 MySQL 服务器可以写入的地方。</p><h4 id="SELECT-…-INTO-OUTFILE-语句有以下属性">SELECT … INTO OUTFILE 语句有以下属性:</h4><ul><li>LOAD DATA INFILE是SELECT … INTO OUTFILE的逆操作，SELECT句法。为了将一个数据库的数据写入一个文件，使用SELECT … INTO OUTFILE，为了将文件读回数据库，使用LOAD DATA INFILE。</li><li>SELECT…INTO OUTFILE 'file_name’形式的SELECT可以把被选择的行写入一个文件中。该文件被创建到服务器主机上，因此您必须拥有FILE权限，才能使用此语法。</li><li>输出不能是一个已存在的文件。防止文件数据被篡改。</li><li>你需要有一个登陆服务器的账号来检索文件。否则 SELECT … INTO OUTFILE 不会起任何作用。</li><li>在UNIX中，该文件被创建后是可读的，权限由MySQL服务器所拥有。这意味着，虽然你就可以读取该文件，但可能无法将其删除。</li></ul><h3 id="mysqldump-导出表作为原始数据">mysqldump 导出表作为原始数据</h3><p>mysqldump 是 MySQL 提供的用于备份和导出数据库的命令行工具。</p><p><strong>mysqldump</strong> 是 mysql 用于转存储数据库的实用程序。它主要产生一个 SQL 脚本，其中包含从头重新创建数据库所必需的命令 CREATE TABLE INSERT 等。</p><p>使用 <strong>mysqldump</strong> 导出数据需要使用 <strong>–tab</strong> 选项来指定导出文件指定的目录，该目标必须是可写的。</p><p>mysqldump 基本的用法：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p password -h hostname database_name &gt; output_file.sql</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>-u</code>: 指定 MySQL 用户名。</li><li><code>-p</code>: 提示输入密码。</li><li><code>-h</code>: 指定 MySQL 主机名。</li><li><code>database_name</code>: 要导出的数据库名称。</li><li><code>output_file.sql</code>: 导出数据保存到的文件。</li></ul><p>以下实例将数据表 runoob_tbl 导出到 /tmp 目录中：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysqldump -u root -p --no-create-info \</span></span><br><span class="line"><span class="language-bash">            --tab=/tmp RUNOOB runoob_tbl</span></span><br><span class="line">password ******</span><br></pre></td></tr></table></figure><h3 id="mysqldump-实例">mysqldump 实例</h3><p><strong>1. 导出整个数据库</strong></p><p>导出 mydatabase 数据库到 mydatabase_backup.sql 文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p mydatabase &gt; mydatabase_backup.sql</span><br></pre></td></tr></table></figure><p><strong>2. 导出特定表</strong></p><p>如果你只想导出数据库中的某个表，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p password -h hostname database_name table_name &gt; output_file.sql</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p mydatabase mytable &gt; mytable_backup.sql</span><br></pre></td></tr></table></figure><p><strong>3. 导出数据库结构</strong></p><p>如果只想导出数据库结构而不包括数据，可以使用 <strong>–no-data</strong> 选项：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p password -h hostname --no-data database_name &gt; output_file.sql</span><br></pre></td></tr></table></figure><p><strong>4. 导出压缩文件</strong></p><p>你可以将导出的数据进行压缩，以减小文件大小。例如，使用 gzip：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p password -h hostname database_name | gzip &gt; output_file.sql.gz</span><br></pre></td></tr></table></figure><h4 id="导出-SQL-格式的数据">导出 SQL 格式的数据</h4><p>导出 SQL 格式的数据到指定文件，如下所示：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysqldump -u root -p RUNOOB runoob_tbl &gt; dump.txt</span></span><br><span class="line">password ******</span><br></pre></td></tr></table></figure><p>如果你需要导出整个数据库的数据，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysqldump -u root -p RUNOOB &gt; database_dump.txt</span></span><br><span class="line">password ******</span><br></pre></td></tr></table></figure><p>如果需要备份所有数据库，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysqldump -u root -p --all-databases &gt; database_dump.txt</span></span><br><span class="line">password ******</span><br></pre></td></tr></table></figure><p>–all-databases 选项在 MySQL 3.23.12 及以后版本加入。</p><p>该方法可用于实现数据库的备份策略。</p><h3 id="将数据表及数据库拷贝至其他主机">将数据表及数据库拷贝至其他主机</h3><p>如果你需要将数据拷贝至其他的 MySQL 服务器上, 你可以在 mysqldump 命令中指定数据库名及数据表。</p><p>在源主机上执行以下命令，将数据备份至 dump.txt 文件中:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysqldump -u root -p database_name table_name &gt; dump.txt</span></span><br><span class="line">password *****</span><br></pre></td></tr></table></figure><p>如果完整备份数据库，则无需使用特定的表名称。</p><p>如果你需要将备份的数据库导入到MySQL服务器中，可以使用以下命令，使用以下命令你需要确认数据库已经创建：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysql -u root -p database_name &lt; dump.txt</span></span><br><span class="line">password *****</span><br></pre></td></tr></table></figure><p>你也可以使用以下命令将导出的数据直接导入到远程的服务器上，但请确保两台服务器是相通的，是可以相互访问的：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysqldump -u root -p database_name \</span></span><br><span class="line"><span class="language-bash">       | mysql -h other-host.com database_name</span></span><br></pre></td></tr></table></figure><p>以上命令中使用了管道来将导出的数据导入到指定的远程主机上。</p><h2 id="导入数据">导入数据</h2><h3 id="mysql-命令导入">mysql 命令导入</h3><p>使用 mysql 命令导入语法格式为：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u your_username -p -h your_host -P your_port -D your_database</span><br></pre></td></tr></table></figure><p>your_username、your_host、your_port、your_database 分别为你的 MySQL 用户名、主机、端口和数据库。</p><p><strong>实例</strong>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql -uroot -p123456 &lt; runoob.sql</span></span><br></pre></td></tr></table></figure><p>以上命令将将备份的整个数据库 runoob.sql 导入。</p><p>执行上述命令后，系统将要求输入 MySQL 用户的密码。输入密码并按Enter键。</p><p>这样，MySQL 将执行 SQL 文件中的语句，将数据导入到指定的数据库中。</p><p>请注意，如果 SQL 文件包含创建数据库的语句，确保在执行导入之前数据库已经存在。如果文件包含创建表的语句，确保表不存在或者是空的，以免导入数据时发生冲突。</p><h3 id="source-命令导入">source 命令导入</h3><p>source 命令导入数据库需要先登录到数库终端：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database abc;      # 创建数据库</span><br><span class="line">mysql<span class="operator">&gt;</span> use abc;                  # 使用已创建的数据库 </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> names utf8;           # 设置编码</span><br><span class="line">mysql<span class="operator">&gt;</span> source <span class="operator">/</span>home<span class="operator">/</span>abc<span class="operator">/</span>abc.sql  # 导入备份数据库</span><br></pre></td></tr></table></figure><p>使用 source 命令的好处是，你可以在 MySQL 命令行中直接执行，而无需退出 MySQL 并使用其他命令。</p><h3 id="使用-LOAD-DATA-导入数据">使用 LOAD DATA 导入数据</h3><p>MySQL 中提供了LOAD DATA INFILE语句来插入数据。 以下实例中将从当前目录中读取文件 dump.txt ，将该文件中的数据插入到当前数据库的 mytbl 表中。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> LOAD DATA <span class="keyword">LOCAL</span> INFILE <span class="string">&#x27;dump.txt&#x27;</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> mytbl;</span><br></pre></td></tr></table></figure><p>如果指定LOCAL关键词，则表明从客户主机上按路径读取文件。如果没有指定，则文件在服务器上按路径读取文件。</p><p>你能明确地在LOAD DATA语句中指出列值的分隔符和行尾标记，但是默认标记是定位符和换行符。</p><p>两个命令的 FIELDS 和 LINES 子句的语法是一样的。两个子句都是可选的，但是如果两个同时被指定，FIELDS 子句必须出现在 LINES 子句之前。</p><p>如果用户指定一个 FIELDS 子句，它的子句 （TERMINATED BY、[OPTIONALLY] ENCLOSED BY 和 ESCAPED BY) 也是可选的，不过，用户必须至少指定它们中的一个。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> LOAD DATA <span class="keyword">LOCAL</span> INFILE <span class="string">&#x27;dump.txt&#x27;</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> mytbl</span><br><span class="line">  <span class="operator">-</span><span class="operator">&gt;</span> FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;:&#x27;</span></span><br><span class="line">  <span class="operator">-</span><span class="operator">&gt;</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\r\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>LOAD DATA 默认情况下是按照数据文件中列的顺序插入数据的，如果数据文件中的列与插入表中的列不一致，则需要指定列的顺序。</p><p>如，在数据文件中的列顺序是 a,b,c，但在插入表的列顺序为b,c,a，则数据导入语法如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> LOAD DATA <span class="keyword">LOCAL</span> INFILE <span class="string">&#x27;dump.txt&#x27;</span> </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> mytbl (b, c, a);</span><br></pre></td></tr></table></figure><h3 id="使用-mysqlimport-导入数据">使用 mysqlimport 导入数据</h3><p>mysqlimport 客户端提供了 LOAD DATA INFILEQL 语句的一个命令行接口。mysqlimport 的大多数选项直接对应 LOAD DATA INFILE 子句。</p><p>从文件 dump.txt 中将数据导入到 mytbl 数据表中, 可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysqlimport -u root -p --<span class="built_in">local</span> mytbl dump.txt</span></span><br><span class="line">password *****</span><br></pre></td></tr></table></figure><p>mysqlimport 命令可以指定选项来设置指定格式,命令语句格式如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysqlimport -u root -p --<span class="built_in">local</span> --fields-terminated-by=<span class="string">&quot;:&quot;</span> \</span></span><br><span class="line"><span class="language-bash">   --lines-terminated-by=<span class="string">&quot;\r\n&quot;</span>  mytbl dump.txt</span></span><br><span class="line">password *****</span><br></pre></td></tr></table></figure><p>mysqlimport 语句中使用 --columns 选项来设置列的顺序：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysqlimport -u root -p --<span class="built_in">local</span> --columns=b,c,a \</span></span><br><span class="line"><span class="language-bash">    mytbl dump.txt</span></span><br><span class="line">password *****</span><br></pre></td></tr></table></figure><hr><h2 id="mysqlimport的常用选项介绍">mysqlimport的常用选项介绍</h2><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">-d or --delete</td><td style="text-align:left">新数据导入数据表中之前删除数据数据表中的所有信息</td></tr><tr><td style="text-align:left">-f or --force</td><td style="text-align:left">不管是否遇到错误，mysqlimport将强制继续插入数据</td></tr><tr><td style="text-align:left">-i or --ignore</td><td style="text-align:left">mysqlimport跳过或者忽略那些有相同唯一 关键字的行， 导入文件中的数据将被忽略。</td></tr><tr><td style="text-align:left">-l or -lock-tables</td><td style="text-align:left">数据被插入之前锁住表，这样就防止了， 你在更新数据库时，用户的查询和更新受到影响。</td></tr><tr><td style="text-align:left">-r or -replace</td><td style="text-align:left">这个选项与－i选项的作用相反；此选项将替代 表中有相同唯一关键字的记录。</td></tr><tr><td style="text-align:left">–fields-enclosed- by= char</td><td style="text-align:left">指定文本文件中数据的记录时以什么括起的， 很多情况下 数据以双引号括起。 默认的情况下数据是没有被字符括起的。</td></tr><tr><td style="text-align:left">–fields-terminated- by=char</td><td style="text-align:left">指定各个数据的值之间的分隔符，在句号分隔的文件中， 分隔符是句号。您可以用此选项指定数据之间的分隔符。 默认的分隔符是跳格符（Tab）</td></tr><tr><td style="text-align:left">–lines-terminated- by=str</td><td style="text-align:left">此选项指定文本文件中行与行之间数据的分隔字符串 或者字符。 默认的情况下mysqlimport以newline为行分隔符。 您可以选择用一个字符串来替代一个单个的字符： 一个新行或者一个回车。</td></tr></tbody></table><p>mysqlimport 命令常用的选项还有 -v 显示版本（version）， -p 提示输入密码（password）等。</p><h2 id="MySQL函数">MySQL函数</h2><h3 id="MySQL-字符串函数">MySQL 字符串函数</h3><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">ASCII(s)</td><td style="text-align:left">返回字符串 s 的第一个字符的 ASCII 码。</td><td style="text-align:left">返回 CustomerName 字段第一个字母的 ASCII 码：<code>SELECT ASCII(CustomerName) AS NumCodeOfFirstChar FROM Customers;</code></td></tr><tr><td style="text-align:left">CHAR_LENGTH(s)</td><td style="text-align:left">返回字符串 s 的字符数</td><td style="text-align:left">返回字符串 RUNOOB 的字符数<code>SELECT CHAR_LENGTH(&quot;RUNOOB&quot;) AS LengthOfString;</code></td></tr><tr><td style="text-align:left">CHARACTER_LENGTH(s)</td><td style="text-align:left">返回字符串 s 的字符数，等同于 CHAR_LENGTH(s)</td><td style="text-align:left">返回字符串 RUNOOB 的字符数<code>SELECT CHARACTER_LENGTH(&quot;RUNOOB&quot;) AS LengthOfString;</code></td></tr><tr><td style="text-align:left">CONCAT(s1,s2…sn)</td><td style="text-align:left">字符串 s1,s2 等多个字符串合并为一个字符串</td><td style="text-align:left">合并多个字符串<code>SELECT CONCAT(&quot;SQL &quot;, &quot;Runoob &quot;, &quot;Gooogle &quot;, &quot;Facebook&quot;) AS ConcatenatedString;</code></td></tr><tr><td style="text-align:left">CONCAT_WS(x, s1,s2…sn)</td><td style="text-align:left">同 CONCAT(s1,s2,…) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</td><td style="text-align:left">合并多个字符串，并添加分隔符：<code>SELECT CONCAT_WS(&quot;-&quot;, &quot;SQL&quot;, &quot;Tutorial&quot;, &quot;is&quot;, &quot;fun!&quot;)AS ConcatenatedString;</code></td></tr><tr><td style="text-align:left">FIELD(s,s1,s2…)</td><td style="text-align:left">返回第一个字符串 s 在字符串列表(s1,s2…)中的位置</td><td style="text-align:left">返回字符串 c 在列表值中的位置：<code>SELECT FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;);</code></td></tr><tr><td style="text-align:left">FIND_IN_SET(s1,s2)</td><td style="text-align:left">返回在字符串s2中与s1匹配的字符串的位置</td><td style="text-align:left">返回字符串 c 在指定字符串中的位置：<code>SELECT FIND_IN_SET(&quot;c&quot;, &quot;a,b,c,d,e&quot;);</code></td></tr><tr><td style="text-align:left">FORMAT(x,n)</td><td style="text-align:left">函数可以将数字 x 进行格式化 “#,###.##”, 将 x 保留到小数点后 n 位，最后一位四舍五入。</td><td style="text-align:left">格式化数字 “#,###.##” 形式：<code>SELECT FORMAT(250500.5634, 2);     -- 输出 250,500.56</code></td></tr><tr><td style="text-align:left">INSERT(s1,x,len,s2)</td><td style="text-align:left">字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</td><td style="text-align:left">从字符串第一个位置开始的 6 个字符替换为 runoob：<code>SELECT INSERT(&quot;google.com&quot;, 1, 6, &quot;runoob&quot;);  -- 输出：runoob.com</code></td></tr><tr><td style="text-align:left">LOCATE(s1,s)</td><td style="text-align:left">从字符串 s 中获取 s1 的开始位置</td><td style="text-align:left">获取 b 在字符串 abc 中的位置：<code>SELECT LOCATE('st','myteststring');  -- 5</code>返回字符串 abc 中 b 的位置：<code>SELECT LOCATE('b', 'abc') -- 2</code></td></tr><tr><td style="text-align:left">LCASE(s)</td><td style="text-align:left">将字符串 s 的所有字母变成小写字母</td><td style="text-align:left">字符串 RUNOOB 转换为小写：<code>SELECT LCASE('RUNOOB') -- runoob</code></td></tr><tr><td style="text-align:left">LEFT(s,n)</td><td style="text-align:left">返回字符串 s 的前 n 个字符</td><td style="text-align:left">返回字符串 runoob 中的前两个字符：<code>SELECT LEFT('runoob',2) -- ru</code></td></tr><tr><td style="text-align:left">LOWER(s)</td><td style="text-align:left">将字符串 s 的所有字母变成小写字母</td><td style="text-align:left">字符串 RUNOOB 转换为小写：<code>SELECT LOWER('RUNOOB') -- runoob</code></td></tr><tr><td style="text-align:left">LPAD(s1,len,s2)</td><td style="text-align:left">在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len</td><td style="text-align:left">将字符串 xx 填充到 abc 字符串的开始处：<code>SELECT LPAD('abc',5,'xx') -- xxabc</code></td></tr><tr><td style="text-align:left">LTRIM(s)</td><td style="text-align:left">去掉字符串 s 开始处的空格</td><td style="text-align:left">去掉字符串 RUNOOB开始处的空格：<code>SELECT LTRIM(&quot;    RUNOOB&quot;) AS LeftTrimmedString;-- RUNOOB</code></td></tr><tr><td style="text-align:left">MID(s,n,len)</td><td style="text-align:left">从字符串 s 的 n 位置截取长度为 len 的子字符串，同 SUBSTRING(s,n,len)</td><td style="text-align:left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT MID(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO</code></td></tr><tr><td style="text-align:left">POSITION(s1 IN s)</td><td style="text-align:left">从字符串 s 中获取 s1 的开始位置</td><td style="text-align:left">返回字符串 abc 中 b 的位置：<code>SELECT POSITION('b' in 'abc') -- 2</code></td></tr><tr><td style="text-align:left">REPEAT(s,n)</td><td style="text-align:left">将字符串 s 重复 n 次</td><td style="text-align:left">将字符串 runoob 重复三次：<code>SELECT REPEAT('runoob',3) -- runoobrunoobrunoob</code></td></tr><tr><td style="text-align:left">REPLACE(s,s1,s2)</td><td style="text-align:left">将字符串 s2 替代字符串 s 中的字符串 s1</td><td style="text-align:left">将字符串 abc 中的字符 a 替换为字符 x：<code>SELECT REPLACE('abc','a','x') --xbc</code></td></tr><tr><td style="text-align:left">REVERSE(s)</td><td style="text-align:left">将字符串s的顺序反过来</td><td style="text-align:left">将字符串 abc 的顺序反过来：<code>SELECT REVERSE('abc') -- cba</code></td></tr><tr><td style="text-align:left">RIGHT(s,n)</td><td style="text-align:left">返回字符串 s 的后 n 个字符</td><td style="text-align:left">返回字符串 runoob 的后两个字符：<code>SELECT RIGHT('runoob',2) -- ob</code></td></tr><tr><td style="text-align:left">RPAD(s1,len,s2)</td><td style="text-align:left">在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len</td><td style="text-align:left">将字符串 xx 填充到 abc 字符串的结尾处：<code>SELECT RPAD('abc',5,'xx') -- abcxx</code></td></tr><tr><td style="text-align:left">RTRIM(s)</td><td style="text-align:left">去掉字符串 s 结尾处的空格</td><td style="text-align:left">去掉字符串 RUNOOB 的末尾空格：<code>SELECT RTRIM(&quot;RUNOOB     &quot;) AS RightTrimmedString;   -- RUNOOB</code></td></tr><tr><td style="text-align:left">SPACE(n)</td><td style="text-align:left">返回 n 个空格</td><td style="text-align:left">返回 10 个空格：<code>SELECT SPACE(10);</code></td></tr><tr><td style="text-align:left">STRCMP(s1,s2)</td><td style="text-align:left">比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td><td style="text-align:left">比较字符串：<code>SELECT STRCMP(&quot;runoob&quot;, &quot;runoob&quot;);  -- 0</code></td></tr><tr><td style="text-align:left">SUBSTR(s, start, length)</td><td style="text-align:left">从字符串 s 的 start 位置截取长度为 length 的子字符串</td><td style="text-align:left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT SUBSTR(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO</code></td></tr><tr><td style="text-align:left">SUBSTRING(s, start, length)</td><td style="text-align:left">从字符串 s 的 start 位置截取长度为 length 的子字符串，等同于 SUBSTR(s, start, length)</td><td style="text-align:left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT SUBSTRING(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO</code></td></tr><tr><td style="text-align:left">SUBSTRING_INDEX(s, delimiter, number)</td><td style="text-align:left">返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。 如果 number 是正数，返回第 number 个字符左边的字符串。 如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</td><td style="text-align:left"><code>SELECT SUBSTRING_INDEX('a*b','*',1) -- a SELECT SUBSTRING_INDEX('a*b','*',-1)  -- b SELECT SUBSTRING_INDEX(SUBSTRING_INDEX('a*b*c*d*e','*',3),'*',-1)  -- c</code></td></tr><tr><td style="text-align:left">TRIM(s)</td><td style="text-align:left">去掉字符串 s 开始和结尾处的空格</td><td style="text-align:left">去掉字符串 RUNOOB 的首尾空格：<code>SELECT TRIM('    RUNOOB    ') AS TrimmedString;</code></td></tr><tr><td style="text-align:left">UCASE(s)</td><td style="text-align:left">将字符串转换为大写</td><td style="text-align:left">将字符串 runoob 转换为大写：<code>SELECT UCASE(&quot;runoob&quot;); -- RUNOOB</code></td></tr><tr><td style="text-align:left">UPPER(s)</td><td style="text-align:left">将字符串转换为大写</td><td style="text-align:left">将字符串 runoob 转换为大写：<code>SELECT UPPER(&quot;runoob&quot;); -- RUNOOB</code></td></tr></tbody></table><h3 id="MySQL-数字函数">MySQL 数字函数</h3><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">ABS(x)</td><td style="text-align:left">返回 x 的绝对值</td><td style="text-align:left">返回 -1 的绝对值：<code>SELECT ABS(-1) -- 返回1</code></td></tr><tr><td style="text-align:left">ACOS(x)</td><td style="text-align:left">求 x 的反余弦值（单位为弧度），x 为一个数值</td><td style="text-align:left"><code>SELECT ACOS(0.25);</code></td></tr><tr><td style="text-align:left">ASIN(x)</td><td style="text-align:left">求反正弦值（单位为弧度），x 为一个数值</td><td style="text-align:left"><code>SELECT ASIN(0.25);</code></td></tr><tr><td style="text-align:left">ATAN(x)</td><td style="text-align:left">求反正切值（单位为弧度），x 为一个数值</td><td style="text-align:left"><code>SELECT ATAN(2.5);</code></td></tr><tr><td style="text-align:left">ATAN2(n, m)</td><td style="text-align:left">求反正切值（单位为弧度）</td><td style="text-align:left"><code>SELECT ATAN2(-0.8, 2);</code></td></tr><tr><td style="text-align:left">AVG(expression)</td><td style="text-align:left">返回一个表达式的平均值，expression 是一个字段</td><td style="text-align:left">返回 Products 表中Price 字段的平均值：<code>SELECT AVG(Price) AS AveragePrice FROM Products;</code></td></tr><tr><td style="text-align:left">CEIL(x)</td><td style="text-align:left">返回大于或等于 x 的最小整数</td><td style="text-align:left"><code>SELECT CEIL(1.5) -- 返回2</code></td></tr><tr><td style="text-align:left">CEILING(x)</td><td style="text-align:left">返回大于或等于 x 的最小整数</td><td style="text-align:left"><code>SELECT CEILING(1.5); -- 返回2</code></td></tr><tr><td style="text-align:left">COS(x)</td><td style="text-align:left">求余弦值(参数是弧度)</td><td style="text-align:left"><code>SELECT COS(2);</code></td></tr><tr><td style="text-align:left">COT(x)</td><td style="text-align:left">求余切值(参数是弧度)</td><td style="text-align:left"><code>SELECT COT(6);</code></td></tr><tr><td style="text-align:left">COUNT(expression)</td><td style="text-align:left">返回查询的记录总数，expression 参数是一个字段或者 * 号</td><td style="text-align:left">返回 Products 表中 products 字段总共有多少条记录：<code>SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;</code></td></tr><tr><td style="text-align:left">DEGREES(x)</td><td style="text-align:left">将弧度转换为角度</td><td style="text-align:left"><code>SELECT DEGREES(3.1415926535898) -- 180</code></td></tr><tr><td style="text-align:left">n DIV m</td><td style="text-align:left">整除，n 为被除数，m 为除数</td><td style="text-align:left">计算 10 除于 5：<code>SELECT 10 DIV 5;  -- 2</code></td></tr><tr><td style="text-align:left">EXP(x)</td><td style="text-align:left">返回 e 的 x 次方</td><td style="text-align:left">计算 e 的三次方：<code>SELECT EXP(3) -- 20.085536923188</code></td></tr><tr><td style="text-align:left">FLOOR(x)</td><td style="text-align:left">返回小于或等于 x 的最大整数</td><td style="text-align:left">小于或等于 1.5 的整数：<code>SELECT FLOOR(1.5) -- 返回1</code></td></tr><tr><td style="text-align:left">GREATEST(expr1, expr2, expr3, …)</td><td style="text-align:left">返回列表中的最大值</td><td style="text-align:left">返回以下数字列表中的最大值：<code>SELECT GREATEST(3, 12, 34, 8, 25); -- 34</code>返回以下字符串列表中的最大值：<code>SELECT GREATEST(&quot;Google&quot;, &quot;Runoob&quot;, &quot;Apple&quot;);   -- Runoob</code></td></tr><tr><td style="text-align:left">LEAST(expr1, expr2, expr3, …)</td><td style="text-align:left">返回列表中的最小值</td><td style="text-align:left">返回以下数字列表中的最小值：<code>SELECT LEAST(3, 12, 34, 8, 25); -- 3</code>返回以下字符串列表中的最小值：<code>SELECT LEAST(&quot;Google&quot;, &quot;Runoob&quot;, &quot;Apple&quot;);   -- Apple</code></td></tr><tr><td style="text-align:left">LN</td><td style="text-align:left">返回数字的自然对数，以 e 为底。</td><td style="text-align:left">返回 2 的自然对数：<code>SELECT LN(2);  -- 0.6931471805599453</code></td></tr><tr><td style="text-align:left">LOG(x) 或 LOG(base, x)</td><td style="text-align:left">返回自然对数(以 e 为底的对数)，如果带有 base 参数，则 base 为指定带底数。</td><td style="text-align:left"><code>SELECT LOG(20.085536923188) -- 3 SELECT LOG(2, 4); -- 2</code></td></tr><tr><td style="text-align:left">LOG10(x)</td><td style="text-align:left">返回以 10 为底的对数</td><td style="text-align:left"><code>SELECT LOG10(100) -- 2</code></td></tr><tr><td style="text-align:left">LOG2(x)</td><td style="text-align:left">返回以 2 为底的对数</td><td style="text-align:left">返回以 2 为底 6 的对数：<code>SELECT LOG2(6);  -- 2.584962500721156</code></td></tr><tr><td style="text-align:left">MAX(expression)</td><td style="text-align:left">返回字段 expression 中的最大值</td><td style="text-align:left">返回数据表 Products 中字段 Price 的最大值：<code>SELECT MAX(Price) AS LargestPrice FROM Products;</code></td></tr><tr><td style="text-align:left">MIN(expression)</td><td style="text-align:left">返回字段 expression 中的最小值</td><td style="text-align:left">返回数据表 Products 中字段 Price 的最小值：<code>SELECT MIN(Price) AS MinPrice FROM Products;</code></td></tr><tr><td style="text-align:left">MOD(x,y)</td><td style="text-align:left">返回 x 除以 y 以后的余数</td><td style="text-align:left">5 除于 2 的余数：<code>SELECT MOD(5,2) -- 1</code></td></tr><tr><td style="text-align:left">PI()</td><td style="text-align:left">返回圆周率(3.141593）</td><td style="text-align:left"><code>SELECT PI() --3.141593</code></td></tr><tr><td style="text-align:left">POW(x,y)</td><td style="text-align:left">返回 x 的 y 次方</td><td style="text-align:left">2 的 3 次方：<code>SELECT POW(2,3) -- 8</code></td></tr><tr><td style="text-align:left">POWER(x,y)</td><td style="text-align:left">返回 x 的 y 次方</td><td style="text-align:left">2 的 3 次方：<code>SELECT POWER(2,3) -- 8</code></td></tr><tr><td style="text-align:left">RADIANS(x)</td><td style="text-align:left">将角度转换为弧度</td><td style="text-align:left">180 度转换为弧度：<code>SELECT RADIANS(180) -- 3.1415926535898</code></td></tr><tr><td style="text-align:left">RAND()</td><td style="text-align:left">返回 0 到 1 的随机数</td><td style="text-align:left"><code>SELECT RAND() --0.93099315644334</code></td></tr><tr><td style="text-align:left">ROUND(x [,y])</td><td style="text-align:left">返回离 x 最近的整数，可选参数 y 表示要四舍五入的小数位数，如果省略，则返回整数。</td><td style="text-align:left"><code>SELECT ROUND(1.23456) --1 SELECT ROUND(345.156, 2) -- 345.16</code></td></tr><tr><td style="text-align:left">SIGN(x)</td><td style="text-align:left">返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1</td><td style="text-align:left"><code>SELECT SIGN(-10) -- (-1)</code></td></tr><tr><td style="text-align:left">SIN(x)</td><td style="text-align:left">求正弦值(参数是弧度)</td><td style="text-align:left"><code>SELECT SIN(RADIANS(30)) -- 0.5</code></td></tr><tr><td style="text-align:left">SQRT(x)</td><td style="text-align:left">返回x的平方根</td><td style="text-align:left">25 的平方根：<code>SELECT SQRT(25) -- 5</code></td></tr><tr><td style="text-align:left">SUM(expression)</td><td style="text-align:left">返回指定字段的总和</td><td style="text-align:left">计算 OrderDetails 表中字段 Quantity 的总和：<code>SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;</code></td></tr><tr><td style="text-align:left">TAN(x)</td><td style="text-align:left">求正切值(参数是弧度)</td><td style="text-align:left"><code>SELECT TAN(1.75);  -- -5.52037992250933</code></td></tr><tr><td style="text-align:left">TRUNCATE(x,y)</td><td style="text-align:left">返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</td><td style="text-align:left"><code>SELECT TRUNCATE(1.23456,3) -- 1.234</code></td></tr></tbody></table><h3 id="MySQL-日期函数">MySQL 日期函数</h3><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">ADDDATE(d,n)</td><td style="text-align:left">计算起始日期 d 加上 n 天的日期</td><td style="text-align:left"><code>SELECT ADDDATE(&quot;2017-06-15&quot;, INTERVAL 10 DAY); -&gt;2017-06-25</code></td></tr><tr><td style="text-align:left">ADDTIME(t,n)</td><td style="text-align:left">n 是一个时间表达式，时间 t 加上时间表达式 n</td><td style="text-align:left">加 5 秒：<code>SELECT ADDTIME('2011-11-11 11:11:11', 5); -&gt;2011-11-11 11:11:16 (秒)</code>添加 2 小时, 10 分钟, 5 秒:<code>SELECT ADDTIME(&quot;2020-06-15 09:34:21&quot;, &quot;2:10:5&quot;);  -&gt; 2020-06-15 11:44:26</code></td></tr><tr><td style="text-align:left">CURDATE()</td><td style="text-align:left">返回当前日期</td><td style="text-align:left"><code>SELECT CURDATE(); -&gt; 2018-09-19</code></td></tr><tr><td style="text-align:left">CURRENT_DATE()</td><td style="text-align:left">返回当前日期</td><td style="text-align:left"><code>SELECT CURRENT_DATE(); -&gt; 2018-09-19</code></td></tr><tr><td style="text-align:left">CURRENT_TIME</td><td style="text-align:left">返回当前时间</td><td style="text-align:left"><code>SELECT CURRENT_TIME(); -&gt; 19:59:02</code></td></tr><tr><td style="text-align:left">CURRENT_TIMESTAMP()</td><td style="text-align:left">返回当前日期和时间</td><td style="text-align:left"><code>SELECT CURRENT_TIMESTAMP() -&gt; 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:left">CURTIME()</td><td style="text-align:left">返回当前时间</td><td style="text-align:left"><code>SELECT CURTIME(); -&gt; 19:59:02</code></td></tr><tr><td style="text-align:left">DATE()</td><td style="text-align:left">从日期或日期时间表达式中提取日期值</td><td style="text-align:left"><code>SELECT DATE(&quot;2017-06-15&quot;);     -&gt; 2017-06-15</code></td></tr><tr><td style="text-align:left">DATEDIFF(d1,d2)</td><td style="text-align:left">计算日期 d1-&gt;d2 之间相隔的天数</td><td style="text-align:left"><code>SELECT DATEDIFF('2001-01-01','2001-02-02') -&gt; -32</code></td></tr><tr><td style="text-align:left">DATE_ADD(d，INTERVAL expr type)</td><td style="text-align:left">计算起始日期 d 加上一个时间段后的日期，type 值可以是：MICROSECONDSECONDMINUTEHOURDAYWEEKMONTHQUARTERYEARSECOND_MICROSECONDMINUTE_MICROSECONDMINUTE_SECONDHOUR_MICROSECONDHOUR_SECONDHOUR_MINUTEDAY_MICROSECONDDAY_SECONDDAY_MINUTEDAY_HOURYEAR_MONTH</td><td style="text-align:left"><code>SELECT DATE_ADD(&quot;2017-06-15&quot;, INTERVAL 10 DAY);     -&gt; 2017-06-25 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL 15 MINUTE); -&gt; 2017-06-15 09:49:21 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL -3 HOUR); -&gt;2017-06-15 06:34:21 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL -3 MONTH); -&gt;2017-03-15 09:34:21</code></td></tr><tr><td style="text-align:left">DATE_FORMAT(d,f)</td><td style="text-align:left">按表达式 f的要求显示日期 d</td><td style="text-align:left"><code>SELECT DATE_FORMAT('2011-11-11 11:11:11','%Y-%m-%d %r') -&gt; 2011-11-11 11:11:11 AM</code></td></tr><tr><td style="text-align:left">DATE_SUB(date,INTERVAL expr type)</td><td style="text-align:left">函数从日期减去指定的时间间隔。</td><td style="text-align:left">Orders 表中 OrderDate 字段减去 2 天：<code>SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders</code></td></tr><tr><td style="text-align:left">DAY(d)</td><td style="text-align:left">返回日期值 d 的日期部分</td><td style="text-align:left"><code>SELECT DAY(&quot;2017-06-15&quot;);   -&gt; 15</code></td></tr><tr><td style="text-align:left">DAYNAME(d)</td><td style="text-align:left">返回日期 d 是星期几，如 Monday,Tuesday</td><td style="text-align:left"><code>SELECT DAYNAME('2011-11-11 11:11:11') -&gt;Friday</code></td></tr><tr><td style="text-align:left">DAYOFMONTH(d)</td><td style="text-align:left">计算日期 d 是本月的第几天</td><td style="text-align:left"><code>SELECT DAYOFMONTH('2011-11-11 11:11:11') -&gt;11</code></td></tr><tr><td style="text-align:left">DAYOFWEEK(d)</td><td style="text-align:left">日期 d 今天是星期几，1 星期日，2 星期一，以此类推</td><td style="text-align:left"><code>SELECT DAYOFWEEK('2011-11-11 11:11:11') -&gt;6</code></td></tr><tr><td style="text-align:left">DAYOFYEAR(d)</td><td style="text-align:left">计算日期 d 是本年的第几天</td><td style="text-align:left"><code>SELECT DAYOFYEAR('2011-11-11 11:11:11') -&gt;315</code></td></tr><tr><td style="text-align:left">EXTRACT(type FROM d)</td><td style="text-align:left">从日期 d 中获取指定的值，type 指定返回的值。 type可取值为： MICROSECONDSECONDMINUTEHOURDAYWEEKMONTHQUARTERYEARSECOND_MICROSECONDMINUTE_MICROSECONDMINUTE_SECONDHOUR_MICROSECONDHOUR_SECONDHOUR_MINUTEDAY_MICROSECONDDAY_SECONDDAY_MINUTEDAY_HOURYEAR_MONTH</td><td style="text-align:left"><code>SELECT EXTRACT(MINUTE FROM '2011-11-11 11:11:11')  -&gt; 11</code></td></tr><tr><td style="text-align:left">FROM_DAYS(n)</td><td style="text-align:left">计算从 0000 年 1 月 1 日开始 n 天后的日期</td><td style="text-align:left"><code>SELECT FROM_DAYS(1111) -&gt; 0003-01-16</code></td></tr><tr><td style="text-align:left">HOUR(t)</td><td style="text-align:left">返回 t 中的小时值</td><td style="text-align:left"><code>SELECT HOUR('1:2:3') -&gt; 1</code></td></tr><tr><td style="text-align:left">LAST_DAY(d)</td><td style="text-align:left">返回给给定日期的那一月份的最后一天</td><td style="text-align:left"><code>SELECT LAST_DAY(&quot;2017-06-20&quot;); -&gt; 2017-06-30</code></td></tr><tr><td style="text-align:left">LOCALTIME()</td><td style="text-align:left">返回当前日期和时间</td><td style="text-align:left"><code>SELECT LOCALTIME() -&gt; 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:left">LOCALTIMESTAMP()</td><td style="text-align:left">返回当前日期和时间</td><td style="text-align:left"><code>SELECT LOCALTIMESTAMP() -&gt; 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:left">MAKEDATE(year, day-of-year)</td><td style="text-align:left">基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</td><td style="text-align:left"><code>SELECT MAKEDATE(2017, 3); -&gt; 2017-01-03</code></td></tr><tr><td style="text-align:left">MAKETIME(hour, minute, second)</td><td style="text-align:left">组合时间，参数分别为小时、分钟、秒</td><td style="text-align:left"><code>SELECT MAKETIME(11, 35, 4); -&gt; 11:35:04</code></td></tr><tr><td style="text-align:left">MICROSECOND(date)</td><td style="text-align:left">返回日期参数所对应的微秒数</td><td style="text-align:left"><code>SELECT MICROSECOND(&quot;2017-06-20 09:34:00.000023&quot;); -&gt; 23</code></td></tr><tr><td style="text-align:left">MINUTE(t)</td><td style="text-align:left">返回 t 中的分钟值</td><td style="text-align:left"><code>SELECT MINUTE('1:2:3') -&gt; 2</code></td></tr><tr><td style="text-align:left">MONTHNAME(d)</td><td style="text-align:left">返回日期当中的月份名称，如 November</td><td style="text-align:left"><code>SELECT MONTHNAME('2011-11-11 11:11:11') -&gt; November</code></td></tr><tr><td style="text-align:left">MONTH(d)</td><td style="text-align:left">返回日期d中的月份值，1 到 12</td><td style="text-align:left"><code>SELECT MONTH('2011-11-11 11:11:11') -&gt;11</code></td></tr><tr><td style="text-align:left">NOW()</td><td style="text-align:left">返回当前日期和时间</td><td style="text-align:left"><code>SELECT NOW() -&gt; 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:left">PERIOD_ADD(period, number)</td><td style="text-align:left">为 年-月 组合日期添加一个时段</td><td style="text-align:left"><code>SELECT PERIOD_ADD(201703, 5);    -&gt; 201708</code></td></tr><tr><td style="text-align:left">PERIOD_DIFF(period1, period2)</td><td style="text-align:left">返回两个时段之间的月份差值</td><td style="text-align:left"><code>SELECT PERIOD_DIFF(201710, 201703); -&gt; 7</code></td></tr><tr><td style="text-align:left">QUARTER(d)</td><td style="text-align:left">返回日期d是第几季节，返回 1 到 4</td><td style="text-align:left"><code>SELECT QUARTER('2011-11-11 11:11:11') -&gt; 4</code></td></tr><tr><td style="text-align:left">SECOND(t)</td><td style="text-align:left">返回 t 中的秒钟值</td><td style="text-align:left"><code>SELECT SECOND('1:2:3') -&gt; 3</code></td></tr><tr><td style="text-align:left">SEC_TO_TIME(s)</td><td style="text-align:left">将以秒为单位的时间 s 转换为时分秒的格式</td><td style="text-align:left"><code>SELECT SEC_TO_TIME(4320) -&gt; 01:12:00</code></td></tr><tr><td style="text-align:left">STR_TO_DATE(string, format_mask)</td><td style="text-align:left">将字符串转变为日期</td><td style="text-align:left"><code>SELECT STR_TO_DATE(&quot;August 10 2017&quot;, &quot;%M %d %Y&quot;); -&gt; 2017-08-10</code></td></tr><tr><td style="text-align:left">SUBDATE(d,n)</td><td style="text-align:left">日期 d 减去 n 天后的日期</td><td style="text-align:left"><code>SELECT SUBDATE('2011-11-11 11:11:11', 1) -&gt;2011-11-10 11:11:11 (默认是天)</code></td></tr><tr><td style="text-align:left">SUBTIME(t,n)</td><td style="text-align:left">时间 t 减去 n 秒的时间</td><td style="text-align:left"><code>SELECT SUBTIME('2011-11-11 11:11:11', 5) -&gt;2011-11-11 11:11:06 (秒)</code></td></tr><tr><td style="text-align:left">SYSDATE()</td><td style="text-align:left">返回当前日期和时间</td><td style="text-align:left"><code>SELECT SYSDATE() -&gt; 2018-09-19 20:57:43</code></td></tr><tr><td style="text-align:left">TIME(expression)</td><td style="text-align:left">提取传入表达式的时间部分</td><td style="text-align:left"><code>SELECT TIME(&quot;19:30:10&quot;); -&gt; 19:30:10</code></td></tr><tr><td style="text-align:left">TIME_FORMAT(t,f)</td><td style="text-align:left">按表达式 f 的要求显示时间 t</td><td style="text-align:left"><code>SELECT TIME_FORMAT('11:11:11','%r') 11:11:11 AM</code></td></tr><tr><td style="text-align:left">TIME_TO_SEC(t)</td><td style="text-align:left">将时间 t 转换为秒</td><td style="text-align:left"><code>SELECT TIME_TO_SEC('1:12:00') -&gt; 4320</code></td></tr><tr><td style="text-align:left">TIMEDIFF(time1, time2)</td><td style="text-align:left">计算时间差值</td><td style="text-align:left"><code>mysql&gt; SELECT TIMEDIFF(&quot;13:10:11&quot;, &quot;13:10:10&quot;); -&gt; 00:00:01 mysql&gt; SELECT TIMEDIFF('2000:01:01 00:00:00',    -&gt;                 '2000:01:01 00:00:00.000001');        -&gt; '-00:00:00.000001' mysql&gt; SELECT TIMEDIFF('2008-12-31 23:59:59.000001',    -&gt;                 '2008-12-30 01:01:01.000002');        -&gt; '46:58:57.999999'</code></td></tr><tr><td style="text-align:left">TIMESTAMP(expression, interval)</td><td style="text-align:left">单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和</td><td style="text-align:left"><code>mysql&gt; SELECT TIMESTAMP(&quot;2017-07-23&quot;,  &quot;13:10:11&quot;); -&gt; 2017-07-23 13:10:11 mysql&gt; SELECT TIMESTAMP('2003-12-31');        -&gt; '2003-12-31 00:00:00' mysql&gt; SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');        -&gt; '2004-01-01 00:00:00'</code></td></tr><tr><td style="text-align:left">TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)</td><td style="text-align:left">计算时间差，返回 datetime_expr2 − datetime_expr1 的时间差</td><td style="text-align:left"><code>mysql&gt; SELECT TIMESTAMPDIFF(DAY,'2003-02-01','2003-05-01');   // 计算两个时间相隔多少天        -&gt; 89 mysql&gt; SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');   // 计算两个时间相隔多少月        -&gt; 3 mysql&gt; SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');    // 计算两个时间相隔多少年        -&gt; -1 mysql&gt; SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');  // 计算两个时间相隔多少分钟        -&gt; 128885</code></td></tr><tr><td style="text-align:left">TO_DAYS(d)</td><td style="text-align:left">计算日期 d 距离 0000 年 1 月 1 日的天数</td><td style="text-align:left"><code>SELECT TO_DAYS('0001-01-01 01:01:01') -&gt; 366</code></td></tr><tr><td style="text-align:left">WEEK(d)</td><td style="text-align:left">计算日期 d 是本年的第几个星期，范围是 0 到 53</td><td style="text-align:left"><code>SELECT WEEK('2011-11-11 11:11:11') -&gt; 45</code></td></tr><tr><td style="text-align:left">WEEKDAY(d)</td><td style="text-align:left">日期 d 是星期几，0 表示星期一，1 表示星期二</td><td style="text-align:left"><code>SELECT WEEKDAY(&quot;2017-06-15&quot;); -&gt; 3</code></td></tr><tr><td style="text-align:left">WEEKOFYEAR(d)</td><td style="text-align:left">计算日期 d 是本年的第几个星期，范围是 0 到 53</td><td style="text-align:left"><code>SELECT WEEKOFYEAR('2011-11-11 11:11:11') -&gt; 45</code></td></tr><tr><td style="text-align:left">YEAR(d)</td><td style="text-align:left">返回年份</td><td style="text-align:left"><code>SELECT YEAR(&quot;2017-06-15&quot;); -&gt; 2017</code></td></tr><tr><td style="text-align:left">YEARWEEK(date, mode)</td><td style="text-align:left">返回年份及第几周（0到53），mode 中 0 表示周天，1表示周一，以此类推</td><td style="text-align:left"><code>SELECT YEARWEEK(&quot;2017-06-15&quot;); -&gt; 201724</code></td></tr></tbody></table><h3 id="MySQL-高级函数">MySQL 高级函数</h3><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">BIN(x)</td><td style="text-align:left">返回 x 的二进制编码，x 为十进制数</td><td style="text-align:left">15 的 2 进制编码:<code>SELECT BIN(15); -- 1111</code></td></tr><tr><td style="text-align:left">BINARY(s)</td><td style="text-align:left">将字符串 s 转换为二进制字符串</td><td style="text-align:left"><code>SELECT BINARY &quot;RUNOOB&quot;; -&gt; RUNOOB</code></td></tr><tr><td style="text-align:left"><code>CASE expression    WHEN condition1 THEN result1    WHEN condition2 THEN result2   ...    WHEN conditionN THEN resultN    ELSE result END</code></td><td style="text-align:left">CASE 表示函数开始，END 表示函数结束。如果 condition1 成立，则返回 result1, 如果 condition2 成立，则返回 result2，当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。</td><td style="text-align:left"><code>SELECT CASE  　WHEN 1 &gt; 0 　THEN '1 &gt; 0' 　WHEN 2 &gt; 0 　THEN '2 &gt; 0' 　ELSE '3 &gt; 0' 　END -&gt;1 &gt; 0</code></td></tr><tr><td style="text-align:left">CAST(x AS type)</td><td style="text-align:left">转换数据类型</td><td style="text-align:left">字符串日期转换为日期：<code>SELECT CAST(&quot;2017-08-29&quot; AS DATE); -&gt; 2017-08-29</code></td></tr><tr><td style="text-align:left">COALESCE(expr1, expr2, …, expr_n)</td><td style="text-align:left">返回参数中的第一个非空表达式（从左向右）</td><td style="text-align:left"><code>SELECT COALESCE(NULL, NULL, NULL, 'runoob.com', NULL, 'google.com'); -&gt; runoob.com</code></td></tr><tr><td style="text-align:left">CONNECTION_ID()</td><td style="text-align:left">返回唯一的连接 ID</td><td style="text-align:left"><code>SELECT CONNECTION_ID(); -&gt; 4292835</code></td></tr><tr><td style="text-align:left">CONV(x,f1,f2)</td><td style="text-align:left">返回 f1 进制数变成 f2 进制数</td><td style="text-align:left"><code>SELECT CONV(15, 10, 2); -&gt; 1111</code></td></tr><tr><td style="text-align:left">CONVERT(s USING cs)</td><td style="text-align:left">函数将字符串 s 的字符集变成 cs</td><td style="text-align:left"><code>SELECT CHARSET('ABC') -&gt;utf-8     SELECT CHARSET(CONVERT('ABC' USING gbk)) -&gt;gbk</code></td></tr><tr><td style="text-align:left">CURRENT_USER()</td><td style="text-align:left">返回当前用户</td><td style="text-align:left"><code>SELECT CURRENT_USER(); -&gt; guest@%</code></td></tr><tr><td style="text-align:left">DATABASE()</td><td style="text-align:left">返回当前数据库名</td><td style="text-align:left"><code>SELECT DATABASE();    -&gt; runoob</code></td></tr><tr><td style="text-align:left">IF(expr,v1,v2)</td><td style="text-align:left">如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。</td><td style="text-align:left"><code>SELECT IF(1 &gt; 0,'正确','错误')     -&gt;正确</code></td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/mysql/mysql-func-ifnull.html">IFNULL(v1,v2)</a></td><td style="text-align:left">如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</td><td style="text-align:left"><code>SELECT IFNULL(null,'Hello Word') -&gt;Hello Word</code></td></tr><tr><td style="text-align:left">ISNULL(expression)</td><td style="text-align:left">判断表达式是否为 NULL</td><td style="text-align:left"><code>SELECT ISNULL(NULL); -&gt;1</code></td></tr><tr><td style="text-align:left">LAST_INSERT_ID()</td><td style="text-align:left">返回最近生成的 AUTO_INCREMENT 值</td><td style="text-align:left"><code>SELECT LAST_INSERT_ID(); -&gt;6</code></td></tr><tr><td style="text-align:left">NULLIF(expr1, expr2)</td><td style="text-align:left">比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1</td><td style="text-align:left"><code>SELECT NULLIF(25, 25); -&gt;</code></td></tr><tr><td style="text-align:left">SESSION_USER()</td><td style="text-align:left">返回当前用户</td><td style="text-align:left"><code>SELECT SESSION_USER(); -&gt; guest@%</code></td></tr><tr><td style="text-align:left">SYSTEM_USER()</td><td style="text-align:left">返回当前用户</td><td style="text-align:left"><code>SELECT SYSTEM_USER(); -&gt; guest@%</code></td></tr><tr><td style="text-align:left">USER()</td><td style="text-align:left">返回当前用户</td><td style="text-align:left"><code>SELECT USER(); -&gt; guest@%</code></td></tr><tr><td style="text-align:left">VERSION()</td><td style="text-align:left">返回数据库的版本号</td><td style="text-align:left"><code>SELECT VERSION() -&gt; 5.6.34</code></td></tr></tbody></table><h3 id="MySQL-8-0-版本新增的一些常用函数：">MySQL 8.0 版本新增的一些常用函数：</h3><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">JSON_OBJECT()</td><td style="text-align:left">将键值对转换为 JSON 对象</td><td style="text-align:left"><code>SELECT JSON_OBJECT('key1', 'value1', 'key2', 'value2')</code></td></tr><tr><td style="text-align:left">JSON_ARRAY()</td><td style="text-align:left">将值转换为 JSON 数组</td><td style="text-align:left"><code>SELECT JSON_ARRAY(1, 2, 'three')</code></td></tr><tr><td style="text-align:left">JSON_EXTRACT()</td><td style="text-align:left">从 JSON 字符串中提取指定的值</td><td style="text-align:left"><code>SELECT JSON_EXTRACT('&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30&#125;', '$.name')</code></td></tr><tr><td style="text-align:left">JSON_CONTAINS()</td><td style="text-align:left">检查一个 JSON 字符串是否包含指定的值</td><td style="text-align:left"><code>SELECT JSON_CONTAINS('&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30&#125;', 'John', '$.name')</code></td></tr><tr><td style="text-align:left">ROW_NUMBER()</td><td style="text-align:left">为查询结果中的每一行分配一个唯一的数字</td><td style="text-align:left"><code>SELECT ROW_NUMBER() OVER(ORDER BY id) AS row_number, name FROM users</code></td></tr><tr><td style="text-align:left">RANK()</td><td style="text-align:left">为查询结果中的每一行分配一个排名</td><td style="text-align:left"><code>SELECT RANK() OVER(ORDER BY score DESC) AS rank, name, score FROM students</code></td></tr></tbody></table><h2 id="MySQL-运算符">MySQL 运算符</h2><p>MySQL 主要有以下几种运算符：</p><ul><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li></ul><h3 id="算术运算符">算术运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">加法</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">减法</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">乘法</td></tr><tr><td style="text-align:left">/ 或 DIV</td><td style="text-align:left">除法</td></tr><tr><td style="text-align:left">% 或 MOD</td><td style="text-align:left">取余</td></tr></tbody></table><p>在除法运算和模运算中，如果除数为0，将是非法除数，返回结果为NULL。</p><p>1、加</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span><span class="operator">+</span><span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span><span class="operator">+</span><span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br></pre></td></tr></table></figure><p>2、减</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span><span class="number">-2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span><span class="number">-2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br></pre></td></tr></table></figure><p>3、乘</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span><span class="operator">*</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span><span class="operator">*</span><span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br></pre></td></tr></table></figure><p>4、除</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span><span class="operator">/</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span><span class="operator">/</span><span class="number">3</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.6667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br></pre></td></tr></table></figure><p>5、商</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">10</span> DIV <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> DIV <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br></pre></td></tr></table></figure><p>6、取余</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">10</span> MOD <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> MOD <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符">比较运算符</h3><p>SELECT 语句中的条件语句经常要使用比较运算符。通过这些比较运算符，可以判断表中的哪些记录是符合条件的。比较结果为真，则返回 1，为假则返回 0，比较结果不确定则返回 NULL。</p><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:left">描述</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;&gt;, !=</td><td style="text-align:left">不等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">BETWEEN</td><td style="text-align:left">在两值之间</td><td style="text-align:left">&gt;=min&amp;&amp;&lt;=max</td></tr><tr><td style="text-align:left">NOT BETWEEN</td><td style="text-align:left">不在两值之间</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IN</td><td style="text-align:left">在集合中</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">NOT IN</td><td style="text-align:left">不在集合中</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">&lt;=&gt;</td><td style="text-align:left">严格比较两个NULL值是否相等</td><td style="text-align:left">两个操作码均为NULL时，其所得值为1；而当一个操作码为NULL时，其所得值为0</td></tr><tr><td style="text-align:left">LIKE</td><td style="text-align:left">模糊匹配</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">REGEXP 或 RLIKE</td><td style="text-align:left">正则式匹配</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IS NULL</td><td style="text-align:left">为空</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">IS NOT NULL</td><td style="text-align:left">不为空</td><td style="text-align:left"></td></tr></tbody></table><p>1、等于</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span><span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span><span class="operator">=</span><span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br></pre></td></tr></table></figure><p>2、不等于</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span><span class="operator">&lt;&gt;</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span><span class="operator">&lt;&gt;</span><span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure><p>3、安全等于</p><p>与 <strong>=</strong> 的区别在于当两个操作码均为 NULL 时，其所得值为 1 而不为 NULL，而当一个操作码为 NULL 时，其所得值为 0而不为 NULL。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span><span class="operator">&lt;=&gt;</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span><span class="operator">&lt;=&gt;</span><span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">null</span><span class="operator">=</span><span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">null</span><span class="operator">=</span><span class="keyword">null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">null</span><span class="operator">&lt;=&gt;</span><span class="keyword">null</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">null</span><span class="operator">&lt;=&gt;</span><span class="keyword">null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br></pre></td></tr></table></figure><p>4、小于</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span><span class="operator">&lt;</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span><span class="operator">&lt;</span><span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br></pre></td></tr></table></figure><p>5、小于等于</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span><span class="operator">&lt;=</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span><span class="operator">&lt;=</span><span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure><p>6、大于</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span><span class="operator">&gt;</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span><span class="operator">&gt;</span><span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br></pre></td></tr></table></figure><p>7、大于等于</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span><span class="operator">&gt;=</span><span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span><span class="operator">&gt;=</span><span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure><p>8、BETWEEN</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">5</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><p>9、IN</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">5</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br></pre></td></tr></table></figure><p>10、NOT IN</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">5</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span>                    <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br></pre></td></tr></table></figure><p>11、IS NULL</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">null</span> <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">null</span> <span class="keyword">is</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">is</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br></pre></td></tr></table></figure><p>12、IS NOT NULL</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select null IS NOT NULL;</span><br><span class="line">+------------------+</span><br><span class="line">| null IS NOT NULL |</span><br><span class="line">+------------------+</span><br><span class="line">|                0 |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">mysql&gt; select &#x27;a&#x27; IS NOT NULL;</span><br><span class="line">+-----------------+</span><br><span class="line">| &#x27;a&#x27; IS NOT NULL |</span><br><span class="line">+-----------------+</span><br><span class="line">|               1 |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p>13、LIKE</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="string">&#x27;12345&#x27;</span> <span class="keyword">like</span> <span class="string">&#x27;12%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="string">&#x27;12345&#x27;</span> <span class="keyword">like</span> <span class="string">&#x27;12%&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="string">&#x27;12345&#x27;</span> <span class="keyword">like</span> <span class="string">&#x27;12_&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="string">&#x27;12345&#x27;</span> <span class="keyword">like</span> <span class="string">&#x27;12_&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span>                  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><p>14、REGEXP</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="string">&#x27;beijing&#x27;</span> REGEXP <span class="string">&#x27;jing&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="string">&#x27;beijing&#x27;</span> REGEXP <span class="string">&#x27;jing&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="string">&#x27;beijing&#x27;</span> REGEXP <span class="string">&#x27;xi&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="string">&#x27;beijing&#x27;</span> REGEXP <span class="string">&#x27;xi&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span>                     <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符">逻辑运算符</h3><p>逻辑运算符用来判断表达式的真假。如果表达式是真，结果返回 1。如果表达式是假，结果返回 0。</p><table><thead><tr><th style="text-align:left">运算符号</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">NOT 或 !</td><td style="text-align:left">逻辑非</td></tr><tr><td style="text-align:left">AND</td><td style="text-align:left">逻辑与</td></tr><tr><td style="text-align:left">OR</td><td style="text-align:left">逻辑或</td></tr><tr><td style="text-align:left">XOR</td><td style="text-align:left">逻辑异或</td></tr></tbody></table><p>1、与</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span>;   </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+     </span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span> <span class="operator">|</span>      </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+      </span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>      </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br></pre></td></tr></table></figure><p>2、或</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">0</span> <span class="keyword">or</span> <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0</span> <span class="keyword">or</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span> <span class="operator">||</span> <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">||</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br></pre></td></tr></table></figure><p>3、非</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">not</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">not</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">!</span><span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">!</span><span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br></pre></td></tr></table></figure><p>4、异或</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span> xor <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> xor <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">0</span> xor <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0</span> xor <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span> xor <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> xor <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">null</span> <span class="keyword">or</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">null</span> <span class="keyword">or</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span> <span class="operator">^</span> <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">^</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br></pre></td></tr></table></figure><h3 id="位运算符">位运算符</h3><p>位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。</p><table><thead><tr><th style="text-align:left">运算符号</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与</td></tr><tr><td style="text-align:left">|</td><td style="text-align:left">按位或</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">按位异或</td></tr><tr><td style="text-align:left">!</td><td style="text-align:left">取反</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">右移</td></tr></tbody></table><p>1、按位与</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">3</span><span class="operator">&amp;</span><span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="operator">&amp;</span><span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br></pre></td></tr></table></figure><p>2、按位或</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">3</span><span class="operator">|</span><span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="operator">|</span><span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br></pre></td></tr></table></figure><p>3、按位异或</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">3</span><span class="operator">^</span><span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="operator">^</span><span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br></pre></td></tr></table></figure><p>4、按位取反</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">~</span><span class="number">18446744073709551612</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">~</span><span class="number">18446744073709551612</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span>                     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br></pre></td></tr></table></figure><p>5、按位右移</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">3</span><span class="operator">&gt;&gt;</span><span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="operator">&gt;&gt;</span><span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure><p>6、按位左移</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">3</span><span class="operator">&lt;&lt;</span><span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="operator">&lt;&lt;</span><span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure><h3 id="运算符优先级">运算符优先级</h3><p>最低优先级为： <strong>:=</strong>。</p><p><img src="https://img.hanshiyi.top/archive/2025060819/2.png" alt="img"></p><p>最高优先级为： <strong>!</strong>、<strong>BINARY</strong>、 <strong>COLLATE</strong>。</p><h2 id="命令大全">命令大全</h2><h3 id="基础命令">基础命令</h3><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">命令</th></tr></thead><tbody><tr><td style="text-align:left">连接到 MySQL 数据库</td><td style="text-align:left"><code>mysql -u 用户名 -p</code></td></tr><tr><td style="text-align:left">查看所有数据库</td><td style="text-align:left"><code>SHOW DATABASES;</code></td></tr><tr><td style="text-align:left">选择一个数据库</td><td style="text-align:left"><code>USE 数据库名;</code></td></tr><tr><td style="text-align:left">查看所有表</td><td style="text-align:left"><code>SHOW TABLES;</code></td></tr><tr><td style="text-align:left">查看表结构</td><td style="text-align:left"><code>DESCRIBE 表名;</code> 或 <code>SHOW COLUMNS FROM 表名;</code></td></tr><tr><td style="text-align:left">创建一个新数据库</td><td style="text-align:left"><code>CREATE DATABASE 数据库名;</code></td></tr><tr><td style="text-align:left">删除一个数据库</td><td style="text-align:left"><code>DROP DATABASE 数据库名;</code></td></tr><tr><td style="text-align:left">创建一个新表</td><td style="text-align:left"><code>CREATE TABLE 表名 (列名1 数据类型 [约束], 列名2 数据类型 [约束], ...);</code></td></tr><tr><td style="text-align:left">删除一个表</td><td style="text-align:left"><code>DROP TABLE 表名;</code></td></tr><tr><td style="text-align:left">插入数据</td><td style="text-align:left"><code>INSERT INTO 表名 (列1, 列2, ...) VALUES (值1, 值2, ...);</code></td></tr><tr><td style="text-align:left">查询数据</td><td style="text-align:left"><code>SELECT 列1, 列2, ... FROM 表名 WHERE 条件;</code></td></tr><tr><td style="text-align:left">更新数据</td><td style="text-align:left"><code>UPDATE 表名 SET 列1 = 值1, 列2 = 值2, ... WHERE 条件;</code></td></tr><tr><td style="text-align:left">删除数据</td><td style="text-align:left"><code>DELETE FROM 表名 WHERE 条件;</code></td></tr><tr><td style="text-align:left">创建用户</td><td style="text-align:left"><code>CREATE USER '用户名'@'主机' IDENTIFIED BY '密码';</code></td></tr><tr><td style="text-align:left">授权用户</td><td style="text-align:left"><code>GRANT 权限 ON 数据库名.* TO '用户名'@'主机';</code></td></tr><tr><td style="text-align:left">刷新权限</td><td style="text-align:left"><code>FLUSH PRIVILEGES;</code></td></tr><tr><td style="text-align:left">查看当前用户</td><td style="text-align:left"><code>SELECT USER();</code></td></tr><tr><td style="text-align:left">退出 MySQL</td><td style="text-align:left"><code>EXIT;</code></td></tr></tbody></table><h3 id="数据库相关命令">数据库相关命令</h3><p>下面是与 MySQL 数据库操作相关的命令，包括创建、删除和修改数据库等操作：</p><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">命令</th></tr></thead><tbody><tr><td style="text-align:left"><strong>创建数据库</strong></td><td style="text-align:left"><code>CREATE DATABASE 数据库名;</code></td></tr><tr><td style="text-align:left"><strong>删除数据库</strong></td><td style="text-align:left"><code>DROP DATABASE 数据库名;</code></td></tr><tr><td style="text-align:left"><strong>修改数据库编码格式和排序规则</strong></td><td style="text-align:left"><code>ALTER DATABASE 数据库名 DEFAULT CHARACTER SET 编码格式 DEFAULT COLLATE 排序规则;</code></td></tr><tr><td style="text-align:left"><strong>查看所有数据库</strong></td><td style="text-align:left"><code>SHOW DATABASES;</code></td></tr><tr><td style="text-align:left"><strong>查看数据库详细信息</strong></td><td style="text-align:left"><code>SHOW CREATE DATABASE 数据库名;</code></td></tr><tr><td style="text-align:left"><strong>选择数据库</strong></td><td style="text-align:left"><code>USE 数据库名;</code></td></tr><tr><td style="text-align:left"><strong>查看数据库的状态信息</strong></td><td style="text-align:left"><code>SHOW STATUS;</code></td></tr><tr><td style="text-align:left"><strong>查看数据库的错误信息</strong></td><td style="text-align:left"><code>SHOW ERRORS;</code></td></tr><tr><td style="text-align:left"><strong>查看数据库的警告信息</strong></td><td style="text-align:left"><code>SHOW WARNINGS;</code></td></tr><tr><td style="text-align:left"><strong>查看数据库的表</strong></td><td style="text-align:left"><code>SHOW TABLES;</code></td></tr><tr><td style="text-align:left"><strong>查看表的结构</strong></td><td style="text-align:left"><code>DESC 表名;</code> <code>DESCRIBE 表名;</code> <code>SHOW COLUMNS FROM 表名;</code> <code>EXPLAIN 表名;</code></td></tr><tr><td style="text-align:left"><strong>创建表</strong></td><td style="text-align:left"><code>CREATE TABLE 表名 (列名1 数据类型 [约束], 列名2 数据类型 [约束], ...);</code></td></tr><tr><td style="text-align:left"><strong>删除表</strong></td><td style="text-align:left"><code>DROP TABLE 表名;</code></td></tr><tr><td style="text-align:left"><strong>修改表结构</strong></td><td style="text-align:left"><code>ALTER TABLE 表名 ADD 列名 数据类型 [约束];</code> <code>ALTER TABLE 表名 DROP 列名;</code> <code>ALTER TABLE 表名 MODIFY 列名 数据类型 [约束];</code></td></tr><tr><td style="text-align:left"><strong>查看表的创建 SQL</strong></td><td style="text-align:left"><code>SHOW CREATE TABLE 表名;</code></td></tr></tbody></table><h3 id="数据表相关命令">数据表相关命令</h3><p>以下是与 MySQL 数据表相关的常用命令，包括创建、修改、删除表以及查看表的结构和数据等操作：</p><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">命令</th></tr></thead><tbody><tr><td style="text-align:left"><strong>创建表</strong></td><td style="text-align:left"><code>CREATE TABLE 表名 (列名1 数据类型 [约束], 列名2 数据类型 [约束], ...);</code></td></tr><tr><td style="text-align:left"><strong>删除表</strong></td><td style="text-align:left"><code>DROP TABLE 表名;</code></td></tr><tr><td style="text-align:left"><strong>修改表结构</strong></td><td style="text-align:left">添加列: <code>ALTER TABLE 表名 ADD 列名 数据类型 [约束];</code> 删除列: <code>ALTER TABLE 表名 DROP 列名;</code> 修改列: <code>ALTER TABLE 表名 MODIFY 列名 数据类型 [约束];</code> 重命名列: <code>ALTER TABLE 表名 CHANGE 旧列名 新列名 数据类型 [约束];</code></td></tr><tr><td style="text-align:left"><strong>查看表结构</strong></td><td style="text-align:left"><code>DESC 表名;</code> <code>DESCRIBE 表名;</code> <code>SHOW COLUMNS FROM 表名;</code> <code>EXPLAIN 表名;</code></td></tr><tr><td style="text-align:left"><strong>查看表的创建 SQL</strong></td><td style="text-align:left"><code>SHOW CREATE TABLE 表名;</code></td></tr><tr><td style="text-align:left"><strong>查看表中的所有数据</strong></td><td style="text-align:left"><code>SELECT * FROM 表名;</code></td></tr><tr><td style="text-align:left"><strong>插入数据</strong></td><td style="text-align:left"><code>INSERT INTO 表名 (列1, 列2, ...) VALUES (值1, 值2, ...);</code></td></tr><tr><td style="text-align:left"><strong>更新数据</strong></td><td style="text-align:left"><code>UPDATE 表名 SET 列1 = 值1, 列2 = 值2, ... WHERE 条件;</code></td></tr><tr><td style="text-align:left"><strong>删除数据</strong></td><td style="text-align:left"><code>DELETE FROM 表名 WHERE 条件;</code></td></tr><tr><td style="text-align:left"><strong>查看表的索引</strong></td><td style="text-align:left"><code>SHOW INDEX FROM 表名;</code></td></tr><tr><td style="text-align:left"><strong>创建索引</strong></td><td style="text-align:left"><code>CREATE INDEX 索引名 ON 表名 (列名);</code></td></tr><tr><td style="text-align:left"><strong>删除索引</strong></td><td style="text-align:left"><code>DROP INDEX 索引名 ON 表名;</code></td></tr><tr><td style="text-align:left"><strong>查看表的约束</strong></td><td style="text-align:left"><code>SHOW CREATE TABLE 表名;</code> (约束信息会包含在创建表的 SQL 中)</td></tr><tr><td style="text-align:left"><strong>查看表的统计信息</strong></td><td style="text-align:left"><code>SHOW TABLE STATUS LIKE '表名';</code></td></tr></tbody></table><h3 id="MySQL-事务相关命令">MySQL 事务相关命令</h3><p>以下是与 MySQL 事务相关的常用命令：</p><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">命令</th></tr></thead><tbody><tr><td style="text-align:left"><strong>开始事务</strong></td><td style="text-align:left"><code>START TRANSACTION;</code> 或 <code>BEGIN;</code></td></tr><tr><td style="text-align:left"><strong>提交事务</strong></td><td style="text-align:left"><code>COMMIT;</code></td></tr><tr><td style="text-align:left"><strong>回滚事务</strong></td><td style="text-align:left"><code>ROLLBACK;</code></td></tr><tr><td style="text-align:left"><strong>查看当前事务的状态</strong></td><td style="text-align:left"><code>SHOW ENGINE INNODB STATUS;</code> (可查看 InnoDB 存储引擎的事务状态)</td></tr><tr><td style="text-align:left"><strong>锁定表以进行事务操作</strong></td><td style="text-align:left"><code>LOCK TABLES 表名 WRITE;</code> 或 <code>LOCK TABLES 表名 READ;</code></td></tr><tr><td style="text-align:left"><strong>释放锁定的表</strong></td><td style="text-align:left"><code>UNLOCK TABLES;</code></td></tr><tr><td style="text-align:left"><strong>设置事务的隔离级别</strong></td><td style="text-align:left"><code>SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</code> <code>SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</code> <code>SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;</code> <code>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《HashMap底层原理》</title>
      <link href="/2025/06/08/2025060809/"/>
      <url>/2025/06/08/2025060809/</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>（1）HashMap 是基于 Map 接口的非同步实现，线程不安全，是为了快速存取而设计的；它采用 key-value 键值对的形式存放元素（并封装成 Node 对象），允许使用 null 键和 null 值，但只允许存在一个键为 null，并且存放在 Node[0] 的位置，不过允许存在多个 value 为 null 的情况。</p><p>（2）在 JDK7 及之前的版本，HashMap 的数据结构可以看成“数组+链表”，在 JDK8 及之后的版本，数据结构可以看成&quot;数组+链表+红黑树&quot;，也就是说 HashMap  底层采用数组实现，数组的每个位置都存储一个单向链表，当链表的长度超过一定的阈值时，就会转换成红黑树。转换的目的是当链表中元素较多时，也能保证HashMap的存取效率（备注：链表转为红黑树只有在数组的长度大于等于64才会触发）</p><p>（3）HashMap 有两个影响性能的关键参数：“初始容量”和“加载因子”：</p><blockquote><ul><li>容量 <code>capacity</code>：就是哈希表中数组的数量，默认初始容量是16，容量必须是2的N次幂，这是为了提高计算机的执行效率。</li><li>加载因子 <code>loadfactor</code>：在 HashMap 扩容之前，容量可以达到多满的程度，默认值为 0.75</li><li>扩容阈值 threshold = capacity * loadfactor</li></ul></blockquote><p>（4）采用 Fail-Fast 机制，底层通过一个 <code>modCount</code> 值记录修改的次数，对 HashMap 的修改操作都会增加这个值。迭代器在初始过程中会将这个值赋给 <code>exceptedModCount</code> ，在迭代的过程中，如果发现 <code>modCount</code> 和 <code>exceptedModCount</code> 的值不一致，代表有其他线程修改了Map，就立刻抛出异常。</p><h2 id="添加元素">添加元素</h2><p>（1）重新计算 hash 值：</p><p>拿到 key 的 <code>hashcode</code> 值之后，调用 <code>hash()</code> 方法重新计算 <code>hash</code> 值，防止质量低下的 <code>hashCode()</code> 函数出现，从而使 hash 值的分布尽量均匀</p><p>JDK8 及之后的版本，对 hash() 方法进行了优化，重新计算 hash 值时，让 hashCode 的高16位参与异或运算，目的是即使 table 数组的长度较小，在计算元素存储位置时，也能让高位也参与运算。</p><blockquote><p>（key == null）? 0 : ( h = key.hashcode()) ^ (h &gt;&gt;&gt; 16)</p></blockquote><p>2）计算元素存放在数组中的哪个位置：</p><p>将重新计算出来的 hash 值与 (tablel.length-1) 进行位与&amp;运算，得出元素应该放入数组的哪个位置。</p><blockquote><p>为什么 HashMap 的底层数组长度总是2的n次方幂？因为当 length 为2的n次方时，h &amp; (length - 1) 就相当于对 length 取模，而且速度比直接取模要快得多，二者等价不等效，这是HashMap在性能上的一个优化</p></blockquote><p>3）将 key-value 添加到数组中：</p><p>① 如果计算出的数组位置上为空，那么直接将这个元素插入放到该位置中。</p><p>② 如果数组该位置上已经存在链表，则使用 equals() 比较链表上是否存在 key 相同的节点，如果为true，则替换原元素；如果不存在，则在链表的尾部插入新节点（Jdk1.7及以前的版本使用的头插法）</p><p>③ 如果插入元素后，如果链表的节点数是否超过8个，则调用 treeifyBin() 将链表节点转为红黑树节点。</p><p>④ 最后判断 HashMap 总容量是否超过阈值 threshold，则调用 resize() 方法进行扩容，扩容后数组的长度变成原来的2倍。</p><blockquote><p>在 HashMap 中，当发生hash冲突时，解决方式是采用拉链法，也就是将所有哈希值相同的记录都放在同一个链表中，除此之外，解决hash冲突的方式有：</p><ul><li>开放地址法（线性探测再散列、二次探测再散列、伪随机探测再散列）：当冲突发生时，在散列表中形成一个探测序列，沿此序列逐个单元地查找，直到找到给定的关键字，或者碰到一个开放的地址为止（即该地址单元为空）。如果是插入的情况，在探查到开放的地址，则可将待插入的新结点存入该地址单元，如果是查找的情况，探查到开放的地址则表明表中无待查的关键字，即查找失败。</li><li>再哈希法：产生冲突时，使用另外的哈希函数计算出一个新的哈希地址、直到冲突不再发生</li><li>建立一个公共溢出区：把冲突的记录都放在另一个存储空间，不放在表里面。</li></ul></blockquote><h2 id="扩容过程">扩容过程</h2><p>（1）重新建立一个新的数组，长度为原数组的两倍；</p><p>（2）遍历旧数组的每个数据，重新计算每个元素在新数组中的存储位置。使用节点的hash值与旧数组长度进行位与运算，如果运算结果为0，表示元素在新数组中的位置不变；否则，则在新数组中的位置下标=原位置+原数组长度。</p><p>（3）将旧数组上的每个数据使用尾插法逐个转移到新数组中，并重新设置扩容阈值。</p><p>问题：为什么扩容时节点重 hash 只可能分布在原索引位置或者 原索引长度+oldCap 位置呢？换句话说，扩容时使用节点的hash值跟oldCap进行位与运算，以此决定将节点分布到原索引位置或者原索引+oldCap位置上的原理是什么呢？</p><p>假设老表的容量为16，则新表容量为16*2=32，假设节点1的hash值为 0000 0000 0000 0000 0000 1111 0000 1010，节点2的hash值为 0000 0000 0000 0000 0000 1111 0001 1010。</p><p>那么节点1和节点2在老表的索引位置计算如下图计算1，由于老表的长度限制，节点1和节点2的索引位置只取决于节点hash值的最后4位。再看计算2，计算2为元素在新表中的索引计算，可以看出如果两个节点在老表的索引位置相同，则新表的索引位置只取决于节点hash值倒数第5位的值，而此位置的值刚好为老表的容量值16，此时节点在新表的索引位置只有两种情况：原索引位置和 原索引+oldCap位置（在此例中即为10和10+16=26）。由于结果只取决于节点hash值的倒数第5位，而此位置的值刚好为老表的容量值16，因此此时新表的索引位置的计算可以替换为计算3，直接使用节点的hash值与老表的容量16进行位于运算，如果结果为0则该节点在新表的索引位置为原索引位置，否则该节点在新表的索引位置为 原索引+ oldCap 位置。<img src="https://img.hanshiyi.top/archive/2025060809/1.png" alt="img"></p><h2 id="HashMap-链表转换为红黑树">HashMap 链表转换为红黑树</h2><p>当数组中某个位置的节点达到8个时，会触发 treeifyBin() 方法将链表节点（Node）转红黑树节点（TreeNode，间接继承Node），转成红黑树节点后，其实链表的结构还存在，通过next属性维持，红黑树节点在进行操作时都会维护链表的结构，并不是转为红黑树节点后，链表结构就不存在了。当数组中某个位置的节点在移除后达到6个时，并且该索引位置的节点为红黑树节点，会触发 untreeify() 将红黑树节点转化成链表节点。</p><p>HashMap 在进行插入和删除时有可能会触发红黑树的插入平衡调整（balanceInsertion方法）或删除平衡调整（balanceDeletion ）方法，调整的方式主要有以下手段：左旋转（rotateLeft方法）、右旋转（rotateRight方法）、改变节点颜色（x.red = false、x.red = true），进行调整的原因是为了维持红黑树的数据结构。</p><blockquote><p>当链表长过长时会转换成红黑树，那能不能使用AVL树替代呢？</p><p>AVL树是完全平衡二叉树，要求每个结点的左右子树的高度之差的绝对值最多为1，而红黑树通过适当的放低该条件（红黑树限制从根到叶子的最长的可能路径不多于最短的可能路径的两倍长，结果是这个树大致上是平衡的），以此来减少插入/删除时的平衡调整耗时，从而获取更好的性能，虽然会导致红黑树的查询会比AVL稍慢，但相比插入/删除时获取的时间，这个付出在大多数情况下显然是值得的</p></blockquote><h2 id="HashMap-在-JDK1-7和JDK1-8的区别">HashMap 在 JDK1.7和JDK1.8的区别</h2><p>① 数据结构：在 JDK7 及之前的版本，HashMap 的数据结构可以看成“数组+链表”，在 JDK8 及之后的版本，数据结构可以看成&quot;数组+链表+红黑树&quot;，当链表的长度超过8时，链表就会转换成红黑树，从而降低时间复杂度（由O(n) 变成了 O(logN)），提高了效率</p><p>② 对数据重哈希：JDK8 及之后的版本，对 hash() 方法进行了优化，重新计算 hash 值时，让 hashCode 的高16位参与异或运算，目的是在 table 的 length较小的时候，在进行计算元素存储位置时，也让高位也参与运算。</p><p>③ 在 JDK7 及之前的版本，在添加元素的时候，采用头插法，所以在扩容的时候，会导致之前元素相对位置倒置了，在多线程环境下扩容可能造成环形链表而导致死循环的问题。DK1.8之后使用的是尾插法，扩容是不会改变元素的相对位置</p><p>④ 扩容时重新计算元素的存储位置的方式：JDK7 及之前的版本重新计算存储位置是直接使用 hash &amp; (table.length-1)；JDK8 使用节点的hash值与旧数组长度进行位与运算，如果运算结果为0，表示元素在新数组中的位置不变；否则，则在新数组中的位置下标=原位置+原数组长度。</p><p>⑤ JDK7 是先扩容后插入，这就导致无论这次插入是否发生hash冲突都需要进行扩容，但如果这次插入并没有发生Hash冲突的话，那么就会造成一次无效扩容；JDK8是先插入再扩容的，优点是减少这一次无效的扩容，原因就是如果这次插入没有发生Hash冲突的话，那么其实就不会造成扩容。</p><h2 id="线程不安全的原因">线程不安全的原因</h2><p>无论在 JDK7 还是 JDK8 的版本中，HashMap 都是线程不安全的，HashMap 的线程不安全主要体现在以下两个方面：</p><ul><li>在JDK7及以前的版本，表现为在多线程环境下进行扩容，由于采用头插法，位于同一索引位置的节点顺序会反掉，导致可能出现死循环的情况</li><li>在JDK8及以后的版本，表现为在多线程环境下添加元素，可能会出现数据丢失的情况</li></ul><p>如果想使用线程安全的 Map 容器，可以使用以下几种方式：</p><p>（1）使用线程安全的 Hashtable，它底层的每个方法都使用了 synchronized 保证线程同步，所以每次都锁住整张表，在性能方面会相对比较低。</p><blockquote><p>除了线程安全性方面，Hashtable 和 HashMap 的不同之处还有：</p><ul><li>继承的父类：两者都实现了 Map 接口，但 HashMap 继承自 AbstractMap 类，而 Hashtable 继承自 Dictionary 类</li><li>遍历方式：HashMap 仅支持 Iterator 的遍历方式，但 Hashtable 实现了 Enumeration 接口，所以支持Iterator和Enumeration两种遍历方式</li><li>使用方式：HashMap 允许 null 键和 null 值，Hashtable 不允许 null 键和 null 值</li><li>数据结构：HashMap 底层使用“数组+链表+红黑树”，Hashtable 底层使用“数组+链表”</li><li>初始容量及扩容方式：HashMap 的默认初始容量为16，每次扩容为原来的2倍；Hashtable 默认初始容量为11，每次扩容为原来的2倍+1。</li><li>元素的hash值：HashMap的hash值是重新计算过的，Hashtable直接使用Object的hashCode；</li></ul><p>之所以会出现初始容量以及元素hash值计算方式的不同，是因为 HashMap 和 Hashtable 设计时的侧重点不同。Hashtable 的侧重点是哈希结果更加均匀，使得哈希冲突减少，当哈希表的大小为素数时，简单的取模哈希的结果会更加均匀。而 HashMap 则更加关注哈希的计算效率问题，在取模计算时，如果模数是2的幂，那么我们可以直接使用位运算来得到结果，效率要大大高于做除法。</p></blockquote><p>2）使用<code>Collections.synchronizedMap()</code>方法来获取一个线程安全的集合，底层原理是使用<code>synchronized</code>来保证线程同步。</p><p>（3）使用 <code>ConcurrentHashMap</code> 集合。</p>]]></content>
      
      
      <categories>
          
          <category> 底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java SE》</title>
      <link href="/2025/06/04/2025060420/"/>
      <url>/2025/06/04/2025060420/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-概述">Java 概述</h2><h3 id="什么是java">什么是java</h3><p>Java 是一门面向对象的高级编程语言。它吸收了 C++ 语言中的大量优点，但又抛弃了 C++ 中容易出错的地方，如垃圾回收、指针。</p><p>同时，Java 又是一门平台无关性的语言，基于对应操作系统的 JVM 实现跨平台性。</p><h3 id="语言特点">语言特点</h3><ul><li>面向对象，封装、继承、多态。</li><li>跨平台性，拥有很好的可移植性。</li><li>支持多线程以及即时编译。</li></ul><h3 id="JVM、JRE、JDK">JVM、JRE、JDK</h3><p><strong>JVM</strong>：是 Java 虚拟机，不同的平台有不同的 JVM 实现，是 Java 跨平台性的基石。JVM 负责将字节码文件解释为该平台的机器码。</p><p><strong>JRE</strong>：是 Java 的运行环境，包含必需的类库和 JVM。</p><p><strong>JDK</strong>：是一套完整的 Java 程序开发环境，包括了 JRE 、JVM、编译器 javac、文档工具 javadoc、字节码工具 javap 等。</p><h2 id="基础语法">基础语法</h2><h3 id="数据类型">数据类型</h3><ol><li><p>数值型：</p><ul><li>整数类型：byte、short、int、long</li><li>浮点类型：float、double</li></ul></li><li><p>字符型：char</p></li><li><p>布尔型：boolean</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">默认值</th><th style="text-align:center">大小</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">0</td><td style="text-align:center">1 byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">0</td><td style="text-align:center">2 byte</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">0</td><td style="text-align:center">4 byte</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">0.0L</td><td style="text-align:center">8 byte</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">0.0f</td><td style="text-align:center">4 byte</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">0.0</td><td style="text-align:center">8 byte</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">‘\u0000’</td><td style="text-align:center">2 byte</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">false</td><td style="text-align:center"></td></tr></tbody></table></li><li><p>引用性：</p><ul><li>类：class</li><li>接口：interface</li><li>数组：[]</li></ul></li></ol><h3 id="数据类型转换">数据类型转换</h3><h4 id="自动类型转换-自动类型提升">自动类型转换(自动类型提升)</h4><p>这是 Java 编译器在不需要显式转换的情况下，将一种基本数据类型转换为另一种基本数据类型的过程。通常发生在表达式求值期间不同数据需要互相兼容时。</p><ul><li>如果任一操作数是 double 类型，其他操作数将被转换为 double 类型。</li><li>否则，如果任一操作数是 float 类型，其他操作数将被转换为 float 类型。</li><li>否则，如果任一操作数是 long 类型，其他操作数将被转换为 long 类型。</li><li>否则，所有操作数将被转换为 int 类型。</li></ul><h4 id="强制类型转换">强制类型转换</h4><p>这是 Java 中将一种数据类型显式转换为另一种数据类型的过程，需要程序员显式地指定。强制类型转换可能会导致数据丢失或精度降低，需要确保转换后的值仍然在目标类型的范围内。</p><h3 id="自动拆箱-装箱">自动拆箱/装箱</h3><ul><li><strong>装箱</strong>：基本数据类型转换为包装类对象。</li><li><strong>拆箱</strong>：包装类对象转换为基本数据类型。</li></ul><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>Integer</code></td></tr><tr><td><code>boolean</code></td><td><code>Boolean</code></td></tr><tr><td><code>char</code></td><td><code>Character</code></td></tr><tr><td><code>byte</code></td><td><code>Byte</code></td></tr><tr><td><code>short</code></td><td><code>Short</code></td></tr><tr><td><code>long</code></td><td><code>Long</code></td></tr><tr><td><code>float</code></td><td><code>Float</code></td></tr><tr><td><code>double</code></td><td><code>Double</code></td></tr></tbody></table><h2 id="和">&amp; 和 &amp;&amp;</h2><p><code>&amp;</code> 是 <code>逻辑与</code>，<code>&amp;&amp;</code> 是 <code>短路与</code>。二者都要求运算符左右两端的布尔值都是 true，整个表达式的值才是 true。但是 <code>&amp;&amp;</code> 左边的表达式的值是 false 时，右边的表达式会直接短路掉，不会进行运算。</p><p>逻辑或运算符（<code>|</code>）和短路或运算符（<code>||</code>）的差别也是类似。</p><h2 id="break、continue、return">break、continue、return</h2><ul><li>break 跳出整个循环，不再执行循环(<strong>结束当前的循环体</strong>)</li><li>continue 跳出本次循环，继续执行下次循环(<strong>结束正在执行的循环 进入下一个循环条件</strong>)</li><li>return 程序返回，不再执行下面的代码(<strong>结束当前的方法 直接返回</strong>)</li></ul><p><img src="https://img.hanshiyi.top/archive/2025060420/javase-9.png" alt="break 、continue 、return"></p><h2 id="面向对象">面向对象</h2><h3 id="面向对象和面向过程的区别">面向对象和面向过程的区别</h3><p>面向过程时以过程为核心，通过函数完成任务，结构是函数+步骤组成的顺序流程。</p><p>面向对象是以对象为核心，通过对象交互完成，结构是类和对象组成的模块化结构，代码可以通过继承、组合、多态等方式复用。</p><h3 id="面向对象编程的特性">面向对象编程的特性</h3><p>面向对象有三大特性：封装、继承、多态。</p><ul><li><strong>封装</strong>：将数据（属性/字段）和方法捆绑在一起，形成一个独立的对象（类的实例），私有化属性并提供外界可以访问的方法。</li><li><strong>继承</strong>：允许一个类（子类）继承现有类（父类/基类）的属性和方法。提高代码的复用性，建立类之间的层次关系。子类可以重写或扩展从父类继承来的属性和方法。</li><li><strong>多态</strong>：同一个接口或方法在不同的类中有不同的实现，比如说动态绑定，父类引用指向子类对象，方法的具体调用在运行时决定。前置条件：<ul><li>子类继承父类</li><li>子类重写父类的方法</li><li>父类引用指向子类的对象</li></ul></li></ul><h3 id="多组合少继承">多组合少继承</h3><p>继承容易导致类之间的强耦合，一旦父类发生改变，子类也要随之改变，违背了开闭原则（尽量不修改现有代码，而是添加新的代码来实现）。</p><p>组合通过在类中组合其他类，能够灵活地扩展功能，避免了复杂的类继承体系，同时遵循了开闭原则和低耦合的设计原则。</p><h3 id="多态的实现原理">多态的实现原理</h3><p>多态通过动态绑定实现，Java 使用虚方法表存储方法指针，方法调用时根据对象实际类型从虚方法表查找具体实现。</p><h2 id="重载和重写">重载和重写</h2><ul><li><strong>重载</strong>：一个类所拥有的名字相同但参数个数不同的方法，可以提高代码的可读性。</li><li><strong>重写</strong>：子类和父类有一样的方法（参数相同、返回类型相同、方法名相同、但方法体可能不同），用于提供父类已经声明的方法的特殊实现，是实现多态的基础条件。</li></ul><h2 id="设计原则">设计原则</h2><h3 id="里氏代换原则-LSP">里氏代换原则(LSP)</h3><p>任何父类可以出现的地方，子类也一定可以出现。LSP 是继承复用的基石，只有当子类可以替换掉父类，并且单位功能不受到影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。因此子类在扩展父类时，不应改变父类原有的行为。</p><h3 id="单一职责原则-SRP">单一职责原则(SRP)</h3><p>一个类应该只有一个引起它变化的原因，即一个类只负责一项职责。目的是使类更加清晰，更容易理解和维护。</p><h3 id="开闭原则-OCP">开闭原则(OCP)</h3><p>软件实体应该对扩展开发，对修改关闭。一个类应该通过扩展来实现新的功能，而不是通过修改已有的代码来实现。</p><h3 id="接口隔离原则-ISP">接口隔离原则(ISP)</h3><p>客户端不应该依赖它不需要的接口。设计接口时应该尽量精简，不应该设计臃肿庞大的接口。</p><h3 id="依赖倒置原则-DIP">依赖倒置原则(DIP)</h3><p>高层模块不应该依赖底层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。设计时应该尽量依赖接口或抽象类，而不是实现类。</p><h2 id="访问修饰符">访问修饰符</h2><p>Java 中，可以使用访问控制符来对保护类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li><strong>default</strong>（默认，留空）：在同一包内可见。可以修饰类、接口、变量、方法。</li><li><strong>private</strong>：在同一类可见。可以修饰变量、方法。<strong>不能修饰类（外部类）</strong>。</li><li><strong>public</strong>：对所有类可见。可以修饰类、接口、变量、方法。</li><li><strong>protected</strong>：对同一包内的类和所有子类可见。可以修饰变量、方法。<strong>不能修饰类（外部类）</strong>。</li></ul><h2 id="关键字">关键字</h2><h3 id="this关键字">this关键字</h3><p>this 是自身的一个对象，代表对象本身，可以理解为：<strong>指向对象本身的一个指针</strong>。</p><p>this 的用法大体可以分为 3 种：</p><ol><li><p>普通的直接引用，this 相当于是指向当前对象本身。</p></li><li><p>形参与成员变量名字重名，用 this 来区分：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name=name;</span><br><span class="line">    <span class="built_in">this</span>.age=age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用本类的构造方法。</p></li></ol><h3 id="static-关键字">static 关键字</h3><p>static 关键字可以用来修饰变量、方法、代码块和内部类，以及导入包。</p><table><thead><tr><th style="text-align:center">修饰对象</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center">变量</td><td style="text-align:left">静态变量，类级别变量，所有实例共享同一份数据。</td></tr><tr><td style="text-align:center">方法</td><td style="text-align:left">静态方法，类级别方法，与实例无关。</td></tr><tr><td style="text-align:center">代码块</td><td style="text-align:left">在类加载时初始化一些数据，只执行一次。</td></tr><tr><td style="text-align:center">内部类</td><td style="text-align:left">与外部类绑定但独立于外部类实例。</td></tr><tr><td style="text-align:center">导入</td><td style="text-align:left">可以直接访问静态成员，无需通过类名引用，简化代码书写，但会降低代码可读性。</td></tr></tbody></table><h4 id="静态变量和实例变量的区别">静态变量和实例变量的区别</h4><p><strong>静态变量</strong>：是被 static 修饰符修饰的变量，也称为类变量，它属于类；不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。</p><p><strong>实例变量</strong>：必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现多个对象共存。</p><h4 id="静态方法和实例方法的区别">静态方法和实例方法的区别</h4><p><strong>静态方法</strong>：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤&quot;<strong>类名.⽅法名</strong>&quot;的⽅式，也可以使⽤&quot;<strong>对象名.⽅法名</strong>&quot;的⽅式。静态方法里不能访问类的非静态成员变量和方法。</p><p><strong>实例⽅法</strong>：依存于类的实例，需要使用&quot;<strong>对象名.⽅法名</strong>&quot;的⽅式调用；可以访问类的所有成员变量和方法。</p><h3 id="final-关键字">final 关键字</h3><ol><li>当 final 修饰类时，这个类不能被继承。</li><li>当 final 修饰方法时，这个方法不能被重写(Override)。</li><li>当 final 修饰变量时，这个变量的值一旦被初始化就不能修改.<ul><li>如果是基本数据类型的变量，其数值一旦在初始化后就不能更改。</li><li>如果是引用数据类型的变量，在对其初始化之后就不能再让其指向另一个对象，但是引用指向的对象内容可以改变。</li></ul></li></ol><h3 id="final、finally、finalize-的区别">final、finally、finalize 的区别</h3><ol><li>final 是一个修饰符，可以修饰类、方法和变量。当 final 修饰类时，该类不能被继承；修饰方法时，该方法不能被重写；修饰变量时，该变量被赋值就不能更改。</li><li>finally 是 Java 中异常处理的一部分，用来创建 try 块后面的 finally 块。无论 try 块中的代码是否抛出异常，finally 块中的代码总是会被执行。finally 块通常用来释放资源（关闭文件、数据库连接）。</li><li>finalize 是 Object 类的一个方法，用于在垃圾回收器将对象从内存中清除出去之前做一些必要的清理工作。该方法被自动调用，我们不能显式地调用。</li></ol><h2 id="抽象、接口、多继承">抽象、接口、多继承</h2><h3 id="抽象类和接口">抽象类和接口</h3><p>一个类只能继承一个抽象类；但一个类可以实现多个接口。所有我们在新建线程类的时候一般推荐使用实现 Runnable 接口的方式，这样线程类还可以继承其他类。</p><p>抽象类符合 is-a 的关系，接口更符合 has-a 的关系，比如说一个类可以序列化的时候，它只需要实现 Serializable 接口就可以了，不需要去继承一个序列化类。</p><p>抽象类更多地是用来为多个相关的类提供一个共同的基础框架，包括状态的初始化，而接口则是定义一套行为标准，让不同的类可以实现同一接口，提供行为的多样化实现。</p><p>抽象类可以有构造方法，但是接口不可以有构造方法，接口主要用于定义一直方法规范，没有具体的实现细节。</p><h3 id="多继承">多继承</h3><p>Java 不支持多继承，一个类只能继承一个类，多继承会引发菱形继承问题。</p><p>接口可以多继承，一个接口可以继承多个接口，使用逗号分隔。</p><h3 id="继承和抽象，抽象类和普通类">继承和抽象，抽象类和普通类</h3><p>继承是一种允许子类继承父类属性和方法的机制。通过继承，子类可以重用父类的代码。</p><p>抽象是一种隐藏复杂性和只显示必要部分的技术。在面向对象编程中，抽象可以通过抽象类和接口实现。</p><p>抽象类使用 abstract 关键字定义，不能被实例化，只能作为其他类的父类。普通类没有 abstract 关键字，可以直接实例化。</p><p>抽象类可以包含抽象方法和非抽象方法。抽象方法没有方法体，必须由子类实现。普通类只能包含非抽象方法。</p><h2 id="变量">变量</h2><h3 id="成员变量和局部变量">成员变量和局部变量</h3><ol><li><strong>从语法上看</strong>：成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被 public，private，static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li><li><strong>从变量在内存中的存储方式来看</strong>：如果成员变量是使用 static 修饰的，那么这个成员变量是属于类的，如果没有属于 static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引用数据类型，那存放的是指向堆内存对象的引用或者是指向常量池中的地址。</li><li><strong>从变量在内存中的⽣存时间上看</strong>：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。</li><li><strong>成员变量如果没有被赋初值</strong>：则会⾃动以类型的默认值⽽赋值（⼀种情况例外:被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。</li></ol><h2 id="和-equals-的区别">== 和 equals 的区别</h2><p>在 Java 中，<code>==</code> 操作符和 <code>equals()</code> 方法用于比较两个对象：</p><ul><li><p><strong>==</strong>：用于比较两个对象的引用，即它们是否指向同一个对象实例。</p><p>​如果两个变量引用同一个对象实例，<code>==</code> 返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p>​对于基本数据类型（如 <code>int</code>，<code>double</code>，<code>char</code>等），<code>==</code> 比较的值是否相等。</p></li><li><p><strong>equals() 方法</strong>：用于比较两个对象的内容是否相等。默认情况下，<code>equals()</code> 方法的行为与 <code>==</code> 相同，即比较对象引用，如在超类 Object 中：</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，<code>equals()</code> 方法通常被各种类重写。例如，<code>String</code> 类重写了 <code>equals()</code> 方法，以便它可以比较两个字符串的字符内容是否完全一样。</p><h2 id="重写-equals-时必须重写-hashCode-方法">重写 equals 时必须重写 hashCode 方法</h2><p>因为基于哈希的集合类（如 HashMap）需要基于这一点来正确存储和查找对象。</p><p>具体地说，HashMap 通过对象的哈希码将其存储在不同的“桶”中，当查找对象时，它需要使用 key 的哈希码来确定对象在哪个桶中，然后再通过 <code>equals()</code> 方法找到对应的对象。</p><p>如果重写了 <code>equals()</code>方法而没有重写 <code>hashCode()</code>方法，那么被认为相等的对象可能会有不同的哈希码，从而导致无法在 HashMap 中正确处理这些对象。</p><h3 id="什么是-hashCode-方法">什么是 hashCode 方法</h3><p><code>hashCode()</code> 方法的作⽤是获取哈希码，它会返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="为什么要有-hashCode-方法">为什么要有 hashCode 方法</h3><p>hashCode 方法主要用来获取对象的哈希码，哈希码是由对象的内存地址或者对象的属性计算出来的，它是⼀个 int 类型的整数，通常是不会重复的，因此可以用来作为键值对的建，以提高查询效率。</p><h3 id="为什么两个对象有相同的-hashCode-值，它们也不一定相等">为什么两个对象有相同的 hashCode 值，它们也不一定相等</h3><p>这主要是由于哈希码（hashCode）的本质和目的所决定的。</p><p>哈希码是通过哈希函数将对象中映射成一个整数值，其主要目的是在哈希表中快速定位对象的存储位置。</p><p>由于哈希函数将一个较大的输入域映射到一个较小的输出域，不同的输入值（即不同的对象）可能会产生相同的输出值（即相同的哈希码）。</p><p>这种情况被称为哈希冲突。当两个不相等的对象发生哈希冲突时，它们会有相同的 hashCode。</p><p>为了解决哈希冲突的问题，哈希表在处理键时，不仅会比较键对象的哈希码，还会使用 equals 方法来检查键对象是否真正相等。如果两个对象的哈希码相同，但通过 equals 方法比较结果为 false，那么这两个对象就不被视为相等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">    ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">    e = p;</span><br></pre></td></tr></table></figure><h3 id="hashCode-和-eauals-方法的关系">hashCode 和 eauals 方法的关系</h3><p>如果两个对象通过 equals 相等，它们的 hashCode 必须相等。否则会导致哈希表类数据结构（如 HashMap、HashSet）的行为异常。</p><p>在哈希表中，如果 equals 相等但 hashCode 不相等，哈希表可能无法正确处理这些对象，导致重复元素或键值冲突等问题。</p><h2 id="值传递和引用传递">值传递和引用传递</h2><p>Java 是值传递，不是引用传递，当一个对象被作为参数传递到方法中时，参数的值就是该对象的引用。引用的值是对象在堆中的地址。</p><p>对象是存储在堆中的，所以传递对象的时候可以理解为把变量存储的对象地址给传递过去。引用类型的变量存储的是对象的地址，而不是对象本身。因此，引用类型的变量在传递时，传递的是对象的地址，也就是说传递的是引用的值。</p><h2 id="深拷贝和浅拷贝的区别">深拷贝和浅拷贝的区别</h2><p>在 Java 中，深拷贝（Deep Copy）和浅拷贝（Shallow Copy）是两种拷贝对象的方式，它们在拷贝对象的方式上有很大不同。</p><p>浅拷贝会创建一个新对象，但这个新对象的属性（字段）和原对象的属性完全相同。如果属性是基本数据类型，拷贝的是基本数据类型的值；如果属性是引用类型，拷贝的是引用地址，新旧对象共享同一个引用对象。</p><p>浅拷贝的实现方式：实现 Cloneable 接口并重写 <code>clone</code> 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    Address address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    String city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;地址&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;姓名&quot;</span>, <span class="number">18</span>, address);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> (Person) person1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(person1.address == person2.address); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深拷贝也会创建一个新对象，但会递归地复制所有的引用对象，确保新对象和原对象完全独立。新对象与原对象的任何更改都不会相互影响。</p><p>深拷贝的实现方式有两种：手动复制所有的引用对象或者使用序列化和反序列化。</p><ul><li><p>手动拷贝</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    Address address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = person.name;</span><br><span class="line">        <span class="built_in">this</span>.age = person.age;</span><br><span class="line">        <span class="built_in">this</span>.address = <span class="keyword">new</span> <span class="title class_">Address</span>(person.address.city);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    String city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;地址 &quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;姓名&quot;</span>, <span class="number">18</span>, address);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(person1);</span><br><span class="line"></span><br><span class="line">        System.out.println(person1.address == person2.address); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>序列化和反序列化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    Address address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">        <span class="keyword">return</span> (Person) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    String city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;地址&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;姓名&quot;</span>, <span class="number">18</span>, address);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> person1.deepClone();</span><br><span class="line"></span><br><span class="line">        System.out.println(person1.address == person2.address); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建对象的方式">创建对象的方式</h2><p>Java 有四种创建对象的方式：</p><ol><li><p>new 关键字创建，这是最常见和直接的方式，通过调用类的构造方法来创建对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure></li><li><p>反射机制创建，反射机制允许在运行时创建对象，并且可以访问类的私有化成员，在框架和工具类中比较常见。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) clazz.newInstance();</span><br></pre></td></tr></table></figure></li><li><p>clone 拷贝创建，通过 clone 方法创建对象，需要实现 Cloneable 接口并重写 clone 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> (Person) person.clone();</span><br></pre></td></tr></table></figure></li><li><p>序列化机制创建，通过序列化将对象转换为字节流，再通过反序列化从字节流中恢复对象。需要实现 Serializable 接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;person.txt&quot;</span>));</span><br><span class="line">oos.writeObject(person);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;person.txt&quot;</span>));</span><br><span class="line"><span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> (Person) ois.readObject();</span><br></pre></td></tr></table></figure></li></ol><h3 id="new-子类的时候，子类和父类的静态代码块、构造方法的执行顺序：">new 子类的时候，子类和父类的静态代码块、构造方法的执行顺序：</h3><p>执行顺序遵循一定的规则，主要包括以下几个步骤：</p><ol><li>首先执行父类的静态代码块（仅在类第一次加载时执行）。</li><li>接着执行子类的静态代码块（仅在类第一次加载时执行）。</li><li>在执行父类的构造方法。</li><li>最后执行子类的构造方法。</li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 父类静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父类构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 子类静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子类构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父类静态代码块</span><br><span class="line">子类静态代码块</span><br><span class="line">父类构造方法</span><br><span class="line">子类构造方法</span><br></pre></td></tr></table></figure></li><li><p>静态代码块：在类加载时执行，仅执行一次，按父类-子类的顺序执行。</p></li><li><p>构造方法：在每次创建对象时执行，按父类-子类的顺序执行，先初始化代码块后构造方法。</p></li></ul><h2 id="String">String</h2><h3 id="String-是基本数据类型吗，可以被继承吗">String 是基本数据类型吗，可以被继承吗</h3><p>String 是一个类，属于引用数据类型。String 类使用 final 修饰，是不可变类，无法被继承。</p><h3 id="常用方法">常用方法</h3><ol><li><code>length()</code> - 返回字符串的长度。</li><li><code>charAt(int index)</code> - 返回指定位置的字符。</li><li><code>substring(int beginIndex, int endIndex)</code> - 返回字符串的一个子串，从 <code>beginIndex</code> 到 <code>endIndex-1</code>。</li><li><code>contains(CharSequence s)</code> - 检查字符串是否包含指定的字符序列。</li><li><code>equals(Object anotherObject)</code> - 比较两个字符串的内容是否相等。</li><li><code>indexOf(int ch)</code> 和 <code>indexOf(String str)</code> - 返回指定字符或字符串首次出现的位置。</li><li><code>replace(char oldChar, char newChar)</code> 和 <code>replace(CharSequence target, CharSequence replacement)</code> - 替换字符串中的字符或字符序列。</li><li><code>trim()</code> - 去除字符串两端的空白字符。</li><li><code>split(String regex)</code> - 根据给定正则表达式的匹配拆分此字符串。</li></ol><h3 id="String、StringBuilder-和-StringBuffer-的区别">String、StringBuilder 和 StringBuffer 的区别</h3><p><code>String</code> 、 <code>StringBuilder</code> 和 <code>StringBuffer</code> 在 Java 中都是用于处理字符串的，它们的区别是：String 是不可变的，平常开发用得最多，当遇到大量字符串连接时，就用 StringBuilder，它不会生成很多新的对象，StringBuffer 和 StringBuilder 类似，但每个方法都加了 synchronized 关键字，是线程安全的。</p><h3 id="String-的特点">String 的特点</h3><ul><li><code>String</code> 类的对象是不可变的。一旦一个 <code>String</code> 对象被创建，它所包含的字符串内容是不可被改变的。</li><li>每次对 <code>String</code> 对象进行修改操作（如拼接、替换等）实际上都会生成一个新的 <code>String</code> 对象，而不是修改原有对象。这可能会导致内存和性能开销，尤其是在大量字符串操作的情况下。</li></ul><h3 id="StringBuilder-的特点">StringBuilder 的特点</h3><ul><li><code>StringBuilder</code> 提供了一系列的方法来进行字符串的增删改查操作，这些操作都是直接在原有字符串对象的底层数组上进行的，而不是生成新的 <code>String</code> 对象。</li><li><code>StringBuilder</code> 不是线程安全的。在没有外部同步的情况下不适用于多线程环境。</li><li>相比 <code>String</code> ，在进行频繁的字符串修改操作时，<code>StringBuilder</code> 能提供更好的性能。Java 中的字符串连 <code>+</code> 操作就是通过 <code>StringBuilder</code> 实现的。</li></ul><h3 id="StringBuffer-的特点">StringBuffer 的特点</h3><p><code>StringBuffer</code>和<code>StringBuilder</code>类似，但<code>StringBuffer</code>是线程安全的，方法前面都加了<code>synchronized</code>关键字。</p><h3 id="使用场景">使用场景</h3><ul><li><strong>String</strong>：适用于字符串内容不会改变的场景，比如说作为 HashMap 的 key。</li><li><strong>StringBuilder</strong>：适用于单线程环境下需要频繁修改字符串内容的场景，比如在循环中拼接或修改字符串，是 String 的完美替代品。</li><li><strong>StringBuffer</strong>：现在已经不怎么用了，因为一般不会在多线程场景下去频繁的修改字符串内容。</li></ul><h3 id="String-str1-new-String-“abc”-和-String-str2-“abc”-的区别">String str1 = new String(“abc”) 和 String str2 = “abc” 的区别</h3><p>直接使用双引号为字符串变量赋值时，Java 首先会检查字符串常量池中是否已经存在相同内容的字符串。如果存在，Java 会让新的变量引用常量池中的那个字符串；如果不存在，就会创建一个新的字符串放入常量池并引用它。</p><p>使用 <code>new String(&quot;abc&quot;)</code> 的方式创建字符串时，实际分为两步：</p><ul><li>第一步，先检查字符串字面量 “abc” 是否在字符串常量池中，如果没有则创建一个；如果已经存在，则引用它。</li><li>第二步，在堆中再创建一个新的字符串对象，并将其初始化为字符串常量池中 “abc” 的一个副本。</li></ul><h3 id="String-s-new-String-“abc”-创建了几个对象？">String s = new String(“abc”)创建了几个对象？</h3><p>字符串常量池中如果之前已经有一个，则不再创建新的，直接引用；如果没有，则创建一个。</p><p>堆中肯定有一个，因为只要使用了 new 关键字，肯定会在堆中创建一个。</p><h3 id="String-是不可变类吗？字符串拼接是如何实现的？">String 是不可变类吗？字符串拼接是如何实现的？</h3><p>String 是不可变的，这意味着一旦一个 String 对象被创建，其存储的文本内容就不能被改变。这是因为：</p><p>①、不可变性使得 String 对象在使用中更加安全。因为字符串经常用作参数传递给其他 Java 方法，例如网络连接、打开文件等。</p><p>如果 String 是可变的，这些方法调用的参数值就可能在不知不觉中被改变，从而导致网络连接被篡改、文件被莫名其妙地修改等问题。</p><p>②、不可变的对象因为状态不会改变，所以更容易进行缓存和重用。字符串常量池的出现正是基于这个原因。</p><p>当代码中出现相同的字符串字面量时，JVM 会确保所有的引用都指向常量池中的同一个对象，从而节约内存。</p><p>③、因为 String 的内容不会改变，所以它的哈希值也就固定不变。这使得 String 对象特别适合作为 HashMap 或 HashSet 等集合的键，因为计算哈希值只需要进行一次，提高了哈希表操作的效率。</p><h3 id="字符串拼接是如何实现的？">字符串拼接是如何实现的？</h3><p>因为 String 是不可变的，因此通过“<strong>+</strong>”操作符进行的字符串拼接，会生成新的字符串对象。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;world!&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab</span> <span class="operator">=</span> a + b;</span><br></pre></td></tr></table></figure><p>a 和 b 是通过双引号定义的，所以会在字符串常量池中，而 ab 是通过“+”操作符拼接的，所以会在堆中生成一个新的对象。</p><p>Java 8 时，JDK 对“+”号的字符串拼接进行了优化，Java 会在编译期基于 StringBuilder 的 append 方法进行拼接。所以通过加号拼接字符串时会创建多个 String 对象是不准确的。因为还会创建一个 StringBuilder 对象，最终调用  <code>toString()</code> 方法的时候再返回一个新的 String 对象。</p><h3 id="如何保证-String-不可变？">如何保证 String 不可变？</h3><p>第一，String 类内部使用一个私有的字符数组来存储字符串数据。这个字符数组在创建字符串时被初始化，之后不允许被改变。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br></pre></td></tr></table></figure><p>第二，String 类没有提供任何可以修改其内容的公共方法，像 concat 这些看似修改字符串的操作，实际上都是返回一个新创建的字符串对象，而原始字符串对象保持不变。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">concat</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">otherLen</span> <span class="operator">=</span> str.length();</span><br><span class="line">    <span class="type">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">    str.getChars(buf, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三，String 类本身被声明为 final，这意味着它不能被继承。这防止了子类可能通过添加修改方法来改变字符串内容的可能性。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span></span><br></pre></td></tr></table></figure><h3 id="intern-方法有什么作用？">intern 方法有什么作用？</h3><ul><li>如果当前字符串内容存在于字符串常量池（即 equals()方法为 true，也就是内容一样），直接返回字符串常量池中的字符串</li><li>否则，将此 String 对象添加到池中，并返回 String 对象的引用</li></ul><h2 id="Integer">Integer</h2><h3 id="Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；相等吗">Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；相等吗?</h3><p>a 和 b 相等，c 和 d 不相等。</p><p>这个问题涉及到 Java 的自动装箱机制以及<code>Integer</code>类的缓存机制。</p><p>对于第一对：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br></pre></td></tr></table></figure><p><code>Integer.valueOf()</code>方法会针对数值在-128 到 127 之间的<code>Integer</code>对象使用缓存。因此，<code>a</code>和<code>b</code>实际上引用了常量池中相同的<code>Integer</code>对象。</p><p>对于第二对：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">128</span>;</span><br></pre></td></tr></table></figure><p><code>c</code>和<code>d</code>不相等。这是因为 128 超出了<code>Integer</code>缓存的范围(-128 到 127)。</p><p>因此，自动装箱过程会为<code>c</code>和<code>d</code>创建两个不同的<code>Integer</code>对象，它们有不同的引用地址。</p><p>可以通过<code>==</code>运算符来检查它们是否相等：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(a == b); <span class="comment">// 输出true</span></span><br><span class="line">System.out.println(c == d); <span class="comment">// 输出false</span></span><br></pre></td></tr></table></figure><p>要比较<code>Integer</code>对象的数值是否相等，应该使用<code>equals</code>方法，而不是<code>==</code>运算符：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(a.equals(b)); <span class="comment">// 输出true</span></span><br><span class="line">System.out.println(c.equals(d)); <span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure><p>使用<code>equals</code>方法时，<code>c</code>和<code>d</code>的比较结果为<code>true</code>，因为<code>equals</code>比较的是对象的数值，而不是引用地址。</p><h3 id="Integer-缓存">Integer 缓存</h3><p>Integer 的大部分数据操作都集中在值比较小的范围，因此 Integer 定义了一个缓存池，默认范围是 -128 到 127。</p><p>当我们使用自动装箱来创建这个范围内的 Integer 对象时，Java 会直接从缓存中返回一个已存在的对象，而不是每次都创建一个新的对象。这意味着，对于这个值范围内的所有 Integer 对象，它们实际上是引用相同的对象实例。</p><p>Integer 缓存的主要目的是优化性能和内存使用。对于小整数的频繁操作，使用缓存可以显著减少对象创建的数量。</p><p>可以在运行的时候添加 <code>-Djava.lang.Integer.IntegerCache.high=1000</code> 来调整缓存池的最大值。</p><p>引用是 Integer 类型，= 右侧是 int 基本类型时，会进行自动装箱，调用的其实是 <code>Integer.valueOf()</code>方法，它会调用 IntegerCache。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IntegerCache 是一个静态内部类，在静态代码块中会初始化好缓存的值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//创建Integer对象存储</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> <span class="title class_">Integer</span>(j++);</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="new-Integer-10-new-Integer-10-相等吗">new Integer(10) == new Integer(10) 相等吗</h3><p>在 Java 中，使用<code>new Integer(10) == new Integer(10)</code>进行比较时，结果是 false。</p><p>这是因为 new 关键字会在堆（Heap）上为每个 Integer 对象分配新的内存空间，所以这里创建了两个不同的 Integer 对象，它们有不同的内存地址。</p><p>当使用==运算符比较这两个对象时，实际上比较的是它们的内存地址，而不是它们的值，因此即使两个对象代表相同的数值（10），结果也是 false。</p><h3 id="String-怎么转成-Integer-的，原理是什么">String 怎么转成 Integer 的，原理是什么</h3><p>String 转成 Integer，主要有两个方法：</p><ul><li>Integer.parseInt(String s)</li><li>Integer.valueOf(String s)</li></ul><p>不管哪一种，最终还是会调用 Integer 类内中的<code>parseInt(String s, int radix)</code>方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String s, <span class="type">int</span> radix)</span></span><br><span class="line">                <span class="keyword">throws</span> NumberFormatException</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//是否是负数</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">negative</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//char字符数组下标和长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = s.length();</span><br><span class="line">        ……</span><br><span class="line">        <span class="type">int</span> digit;</span><br><span class="line">        <span class="comment">//判断字符长度是否大于0，否则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ……</span><br><span class="line">            <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">                <span class="comment">// Accumulating negatively avoids surprises near MAX_VALUE</span></span><br><span class="line">                <span class="comment">//返回指定基数中字符表示的数值。（此处是十进制数值）</span></span><br><span class="line">                digit = Character.digit(s.charAt(i++),radix);</span><br><span class="line">                <span class="comment">//进制位乘以数值</span></span><br><span class="line">                result *= radix;</span><br><span class="line">                result -= digit;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据上面得到的是否负数，返回相应的值</span></span><br><span class="line">        <span class="keyword">return</span> negative ? result : -result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实就是一个简单的字符串遍历计算，不过是用负的值累减。</p><h2 id="Object">Object</h2><h3 id="常见方法">常见方法</h3><p>在 Java 中，经常提到一个词“万物皆对象”，其中的“万物”指的是 Java 中的所有类，而这些类都是 Object 类的子类。</p><p>Object 主要提供了 11 个方法，大致可以分为六类：</p><p><img src="https://img.hanshiyi.top/archive/2025060420/javase-21.png" alt="Object类的方法"></p><ol><li><h4 id="对象比较：">对象比较：</h4><ol><li><p><code>public native int hashCode()</code> ：native 方法，用于返回对象的哈希码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>相等的对象必须具有相等的哈希码。如果重写了 equals 方法，就应该重写 hashCode 方法。可以使用 Objects.hash() 获取对象的 hashcode 方法来生成哈希码。</p></li><li><p><code>public boolean equals(Object obj)</code>：用于比较 2 个对象的内存地址是否相等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果比较的是两个对象的值是否相等，就要重写该方法，比如 String 类、Integer 类等都重写了该方法。举个例子，假如有一个 Person 类，我们认为只要年龄和名字相同，就是同一个人，那么就可以这样重写 equals 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 gettter 和 setter 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Person1) &#123;</span><br><span class="line">            <span class="type">Person1</span> <span class="variable">p</span> <span class="operator">=</span> (Person1) obj;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.getName()) &amp;&amp; <span class="built_in">this</span>.age == p.getAge();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="对象拷贝：">对象拷贝：</h4><p><code>protected native Object clone() throws CloneNotSupportedException</code>：naitive 方法，返回此对象的一个副本。默认实现只做浅拷贝，且类必须实现 Cloneable 接口。</p><p>Object 本身没有实现 Cloneable 接口，所以在不重写 clone 方法的情况下直接直接调用该方法会发生 CloneNotSupportedException 异常。</p></li><li><h4 id="对象转字符串：">对象转字符串：</h4><p><code>public String toString()</code>：返回对象的字符串表示。默认实现返回类名@哈希码的十六进制表示，但通常会被重写以返回更有意义的信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如说一个 Person 类，我们可以重写 toString 方法，返回一个有意义的字符串：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 Lombok 的 @Data注解，自动生成 toString 方法。</p></li><li><h4 id="多线程调度：">多线程调度：</h4><p>每个对象都可以调用 Object 的 wait/notify 方法来实现等待/通知机制：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WaitNotifyDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程1：我要等待&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程1：我被唤醒了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程2：我要唤醒&quot;</span>);</span><br><span class="line">                lock.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程2：我已经唤醒了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线程 1 先执行，它调用了 <code>lock.wait()</code> 方法，然后进入了等待状态。</li><li>线程 2 后执行，它调用了 <code>lock.notify()</code> 方法，然后线程 1 被唤醒了。</li></ul><p>①、<code>public final void wait() throws InterruptedException</code>：调用该方法会导致当前线程等待，直到另一个线程调用此对象的<code>notify()</code>方法或<code>notifyAll()</code>方法。</p><p>②、<code>public final native void notify()</code>：唤醒在此对象监视器上等待的单个线程。如果有多个线程等待，选择一个线程被唤醒。</p><p>③、<code>public final native void notifyAll()</code>：唤醒在此对象监视器上等待的所有线程。</p><p>④、<code>public final native void wait(long timeout) throws InterruptedException</code>：等待 timeout 毫秒，如果在 timeout 毫秒内没有被唤醒，会自动唤醒。</p><p>⑥、<code>public final void wait(long timeout, int nanos) throws InterruptedException</code>：更加精确了，等待 timeout 毫秒和 nanos 纳秒，如果在 timeout 毫秒和 nanos 纳秒内没有被唤醒，会自动唤醒。</p></li><li><h4 id="反射：">反射：</h4><p><code>public final native Class&lt;?&gt; getClass()</code>：用于获取对象的类信息，如类名：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; aClass = p.getClass();</span><br><span class="line">        System.out.println(aClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.itwanger.Person</span><br></pre></td></tr></table></figure></li><li><h4 id="垃圾回收：">垃圾回收：</h4><p><code>protected void finalize() throws Throwable</code>：当垃圾回收器决定回收对象占用的内存时调用此方法。用于清理资源，但 Java 不推荐使用，因为它不可预测且容易导致问题，Java 9 开始已被弃用。</p></li></ol><h2 id="异常处理：">异常处理：</h2><h3 id="异常处理体系">异常处理体系</h3><p>Java 中的异常处理机制用于处理程序运行过程中可能发生的各种异常情况，通常通过 try-catch-finally 语句和 throw 关键字来实现。</p><p><img src="https://img.hanshiyi.top/archive/2025060420/javase-22.png" alt="Java异常体系"></p><p><code>Throwable</code> 是 Java 语言中所有错误和异常的基类。它有两个主要的子类：Error 和 Exception，这两个类分别代表了 Java 异常处理体系中的两个分支。</p><p>Error 类代表那些严重的错误，这类错误通常是程序无法处理的。比如，OutOfMemoryError 表示内存不足，StackOverflowError 表示栈溢出。这些错误通常与 JVM 的运行状态有关，一旦发生，应用程序通常无法恢复。</p><p>Exception 类代表程序可以处理的异常。它分为两大类：编译时异常（Checked Exception）和运行时异常（Runtime Exception）。</p><p>①、编译时异常（Checked Exception）：这类异常在编译时必须被显式处理（捕获或声明抛出）。</p><p>如果方法可能抛出某种编译时异常，但没有捕获它（try-catch）或没有在方法声明中用 throws 子句声明它，那么编译将不会通过。例如：IOException、SQLException 等。</p><p>②、运行时异常（Runtime Exception）：这类异常在运行时抛出，它们都是 RuntimeException 的子类。对于运行时异常，Java 编译器不要求必须处理它们（即不需要捕获也不需要声明抛出）。</p><p>运行时异常通常是由程序逻辑错误导致的，如 NullPointerException、IndexOutOfBoundsException 等。</p><h3 id="异常处理方式">异常处理方式</h3><p><img src="https://img.hanshiyi.top/archive/2025060420/javase-23.png" alt="异常处理"></p><p>①、遇到异常时可以不处理，直接通过throw 和 throws 抛出异常，交给上层调用者处理。</p><p>throws 关键字用于声明可能会抛出的异常，而 throw 关键字用于抛出异常。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;抛出异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②、使用 try-catch 捕获异常，处理异常。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//包含可能会出现异常的代码以及声明异常的方法</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    <span class="comment">//捕获异常并进行处理</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//可选，必执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cath和finally的异常可以同时抛出吗">cath和finally的异常可以同时抛出吗</h4><p>如果 catch 块抛出一个异常，而 finally 块中也抛出异常，那么最终抛出的将是 finally 块中的异常。catch 块中的异常会被丢弃，而 finally 块中的异常会覆盖并向上传递。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;Exception in try&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Exception in catch&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Exception in finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>try 块首先抛出一个 Exception。</li><li>控制流进入 catch 块，catch 块中又抛出了一个 RuntimeException。</li><li>但是在 finally 块中，抛出了一个 IllegalArgumentException，最终程序抛出的异常是 finally 块中的 IllegalArgumentException。</li></ul><p>虽然 catch 和 finally 中的异常不能同时抛出，但可以手动捕获 finally 块中的异常，并将 catch 块中的异常保留下来，避免被覆盖。常见的做法是使用一个变量临时存储 catch 中的异常，然后在 finally 中处理该异常：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">catchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;Exception in try&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            catchException = e;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Exception in catch&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Exception in finally&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (catchException != <span class="literal">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Catch exception: &quot;</span> + catchException.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;Finally exception: &quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三道经典异常处理代码题">三道经典异常处理代码题</h3><h5 id="题目一">题目一</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(test());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>test()</code>方法中，首先有一个<code>try</code>块，接着是一个<code>catch</code>块（用于捕获异常），最后是一个<code>finally</code>块（无论是否捕获到异常，<code>finally</code>块总会执行）。</p><p>①、<code>try</code>块中包含一条<code>return 1;</code>语句。正常情况下，如果<code>try</code>块中的代码能够顺利执行，那么方法将返回数字<code>1</code>。在这个例子中，<code>try</code>块中没有任何可能抛出异常的操作，因此它会正常执行完毕，并准备返回<code>1</code>。</p><p>②、由于<code>try</code>块中没有异常发生，所以<code>catch</code>块中的代码不会执行。</p><p>③、无论前面的代码是否发生异常，<code>finally</code>块总是会执行。在这个例子中，<code>finally</code>块包含一条<code>System.out.print(&quot;3&quot;);</code>语句，意味着在方法结束前，会在控制台打印出<code>3</code>。</p><p>当执行<code>main</code>方法时，控制台的输出将会是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">31</span></span><br></pre></td></tr></table></figure><p>这是因为<code>finally</code>块确保了它包含的<code>System.out.print(&quot;3&quot;);</code>会执行并打印<code>3</code>，随后<code>test()</code>方法返回<code>try</code>块中的值<code>1</code>，最终结果就是<code>31</code>。</p><h5 id="题目二">题目二</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(test1());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>try 返回前先执行 finally，结果 finally 里直接 return 了，自然也就走不到 try 里面的 return 了。</p><h5 id="题目三">题目三</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(test1());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="I-O">I/O</h2><h3 id="Java-中IO流分为几种">Java 中IO流分为几种</h3><p>Java IO 流的划分可以根据多个维度进行，包括数据流的方向（输入或输出）、处理的数据单位（字节或字符）、流的功能以及流是否支持随机访问等。</p><p>按照数据流方法划分：</p><ul><li>输入流（Input Stream）：从源（如文件、网络等）读取数据到程序。</li><li>输出流（Output Stream）：将数据从程序写出到目的地（如文件、网络、控制台等）。</li></ul><p>按照处理数据单位划分：</p><ul><li>字节流（Byte Streams）：以字节为单位读写数据，主要用于处理二进制数据，如音频、图像文件等。</li><li>字符流（Character Streams）：以字符为单位读写数据，主要用于处理文本数据。</li></ul><p>按功能划分：</p><ul><li>节点流（Node Streams）：直接与数据源或目的地相连，如 FileInputStream、FileOutputStream。</li><li>处理流（Processing Streams）：对一个已存在的流进行包装，如缓冲流 BufferedInputStream、BufferedOutputStream。</li><li>管道流（Piped Streams）：用于线程之间的数据传输，如 PipedInputStream、PipedOutputStream。</li></ul><h3 id="Java缓冲区溢出的预防方法">Java缓冲区溢出的预防方法</h3><p>ava 缓冲区溢出主要是由于向缓冲区写入的数据超过其能够存储的数据量。可以采用这些措施来避免：</p><p>①、<strong>合理设置缓冲区大小</strong>：在创建缓冲区时，应根据实际需求合理设置缓冲区的大小，避免创建过大或过小的缓冲区。</p><p>②、<strong>控制写入数据量</strong>：在向缓冲区写入数据时，应该控制写入的数据量，确保不会超过缓冲区的容量。Java 的 ByteBuffer 类提供了<code>remaining()</code>方法，可以获取缓冲区中剩余的可写入数据量。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteBufferExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟接收到的数据</span></span><br><span class="line">        <span class="type">byte</span>[] receivedData = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bufferSize</span> <span class="operator">=</span> <span class="number">1024</span>;  <span class="comment">// 设置一个合理的缓冲区大小</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ByteBuffer</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(bufferSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入数据之前检查容量是否足够</span></span><br><span class="line">        <span class="keyword">if</span> (buffer.remaining() &gt;= receivedData.length) &#123;</span><br><span class="line">            buffer.put(receivedData);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Not enough space in buffer to write data.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备读取数据：将limit设置为当前位置，position设回0</span></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">            <span class="type">byte</span> <span class="variable">data</span> <span class="operator">=</span> buffer.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;Read data: &quot;</span> + data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空缓冲区以便再次使用</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么要有字节流和字符流">为什么要有字节流和字符流</h3><p>其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。</p><p>所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h4 id="文本存储是字节流还是字符流，视频文件呢？">文本存储是字节流还是字符流，视频文件呢？</h4><p>在计算机中，文本和视频都是按照字节存储的，只是如果是文本文件的话，我们可以通过字符流的形式去读取，这样更方面的我们进行直接处理。</p><p>比如说我们需要在一个大文本文件中查找某个字符串，可以直接通过字符流来读取判断。</p><p>处理视频文件时，通常使用字节流（如 Java 中的<code>FileInputStream</code>、<code>FileOutputStream</code>）来读取或写入数据，并且会尽量使用缓冲流（如<code>BufferedInputStream</code>、<code>BufferedOutputStream</code>）来提高读写效率。</p><p>无论是文本文件还是视频文件，它们在物理存储层面都是以字节流的形式存在。区别在于，我们如何通过 Java 代码来解释和处理这些字节流：作为编码后的字符还是作为二进制数据。</p><h3 id="BIO、NIO、AIO的区别">BIO、NIO、AIO的区别</h3><p>Java 常见的 IO 模型有三种：BIO、NIO 和 AIO。</p><p>BIO：采用阻塞式 I/O 模型，线程在执行 I/O 操作时被阻塞，无法处理其他任务，适用于连接数较少的场景。</p><p>NIO：采用非阻塞 I/O 模型，线程在等待 I/O 时可执行其他任务，通过 Selector 监控多个 Channel 上的事件，适用于连接数多但连接时间短的场景。</p><p>AIO：使用异步 I/O 模型，线程发起 I/O 请求后立即返回，当 I/O 操作完成时通过回调函数通知线程，适用于连接数多且连接时间长的场景</p><h4 id="BIO">BIO</h4><p>BIO，也就是传统的 IO，基于字节流或字符流（如 FileInputStream、BufferedReader 等）进行文件读写，基于 Socket 和 ServerSocket 进行网络通信。</p><p>对于每个连接，都需要创建一个独立的线程来处理读写操作。</p><h4 id="NIO">NIO</h4><p>NIO，JDK 1.4 时引入，放在 java.nio 包下，提供了 Channel、Buffer、Selector 等新的抽象，基于 RandomAccessFile、FileChannel、ByteBuffer 进行文件读写，基于 SocketChannel 和 ServerSocketChannel 进行网络通信。</p><p>实际上，“旧”的 I/O 包已经使用 NIO 重新实现过，所以在进行文件读写时，NIO 并无法体现出比 BIO 更可靠的性能。</p><p>NIO 主要体现在网络编程中，服务器可以用一个线程处理多个客户端连接，通过 Selector 监听多个 Channel 来实现多路复用，极大地提高了网络编程的性能。</p><p>缓冲区 Buffer 也能极大提升一次 IO 操作的效率。</p><h4 id="AIO">AIO</h4><p>AIO 是 Java 7 引入的，放在 java.nio.channels 包下，提供了 AsynchronousFileChannel、AsynchronousSocketChannel 等异步 Channel。</p><p>它引入了异步通道的概念，使得 I/O 操作可以异步进行。这意味着线程发起一个读写操作后不必等待其完成，可以立即进行其他任务，并且当读写操作真正完成时，线程会被异步地通知。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AsynchronousFileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> AsynchronousFileChannel.open(Paths.get(<span class="string">&quot;test.txt&quot;</span>), StandardOpenOption.READ);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">Future&lt;Integer&gt; result = fileChannel.read(buffer, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (!result.isDone()) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化">序列化</h2><h3 id="序列化与反序列化">序列化与反序列化</h3><p>序列化（Serialization）是指将对象转换为字节流的过程，以便能够将该对象保存到文件、数据库，或者进行网络传输。</p><p>反序列化（Deserialization）就是将字节流转换回对象的过程，以便构建原始对象。<img src="https://img.hanshiyi.top/archive/2025060420/javase-30.png" alt="序列化和反序列化"></p><h3 id="Serializable接口">Serializable接口</h3><p><code>Serializable</code>接口用于标记一个类可以被序列化。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 省略 getter 和 setter 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="serialVersionUID">serialVersionUID</h3><p>serialVersionUID 是 Java 序列化机制中用于标识类版本的唯一标识符。它的作用是确保在序列化和反序列化过程中，类的版本是兼容的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>serialVersionUID 被设置为 1L 是一种比较省事的做法，也可以使用 Intellij IDEA 进行自动生成。</p><p>但只要 serialVersionUID 在序列化和反序列化过程中保持一致，就不会出现问题。</p><p>如果不显式声明 serialVersionUID，Java 运行时会根据类的详细信息自动生成一个 serialVersionUID。那么当类的结构发生变化时，自动生成的 serialVersionUID 就会发生变化，导致反序列化失败。</p><p>序列化机制只会保存对象的状态，而静态变量属于类的状态，不属于对象的状态。</p><p>使用<code>transient</code>关键字修饰不想序列化的变量。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 省略 getter 和 setter 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化的过程和作用">序列化的过程和作用</h3><p>第一步，实现 Serializable 接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略构造方法、getters和setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步，使用 ObjectOutputStream 来将对象写入到输出流中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;person.ser&quot;</span>));</span><br></pre></td></tr></table></figure><p>第三步，调用 ObjectOutputStream 的 writeObject 方法，将对象序列化并写入到输出流中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;名字&quot;</span>, <span class="number">18</span>);</span><br><span class="line">out.writeObject(person);</span><br></pre></td></tr></table></figure><h3 id="序列化的方式">序列化的方式</h3><ul><li>Java 对象序列化 ：Java 原生序列化方法即通过 Java 原生流(InputStream 和 OutputStream 之间的转化)的方式进行转化，一般是对象输出流 <code>ObjectOutputStream</code>和对象输入流<code>ObjectInputStream</code>。</li><li>Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。</li><li>ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。</li></ul><h2 id="网络编程">网络编程</h2><h3 id="Socket网络套接字">Socket网络套接字</h3><p>Socket 是网络通信的基础，表示两台设备之间通信的一个端点。Socket 通常用于建立 TCP 或 UDP 连接，实现进程间的网络通信。</p><p>一个简单的 TCP 客户端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TcpClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>); <span class="comment">// 连接服务器</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;Hello, Server!&quot;</span>); <span class="comment">// 发送消息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Server response: &quot;</span> + in.readLine()); <span class="comment">// 接收服务器响应</span></span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TCP 服务端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TcpServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>); <span class="comment">// 创建服务器端Socket</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Server started, waiting for connection...&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept(); <span class="comment">// 等待客户端连接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Client connected: &quot;</span> + socket.getInetAddress());</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        String message;</span><br><span class="line">        <span class="keyword">while</span> ((message = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Received: &quot;</span> + message);</span><br><span class="line">            out.println(<span class="string">&quot;Echo: &quot;</span> + message); <span class="comment">// 回送消息</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RPC框架">RPC框架</h3><p>RPC是一种协议，允许程序调用位于远程服务器上的方法，就像调用本地方法一样。RPC 通常基于 Socket 通信实现。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RPC，Remote Procedure Call，远程过程调用</span><br></pre></td></tr></table></figure><p>RPC 框架支持高效的序列化（如 Protocol Buffers）和通信协议（如 HTTP/2），屏蔽了底层网络通信的细节，开发者只需关注业务逻辑即可。</p><p>常见的 RPC 框架包括：</p><ol><li>gRPC：基于 HTTP/2 和 Protocol Buffers。</li><li>Dubbo：阿里开源的分布式 RPC 框架，适合微服务场景。</li><li>Spring Cloud OpenFeign：基于 REST 的轻量级 RPC 框架。</li><li>Thrift：Apache 的跨语言 RPC 框架，支持多语言代码生成。</li></ol><h2 id="泛型">泛型</h2><p>泛型主要用于提高代码的类型安全，它允许在定义类、接口和方法时使用类型参数，这样可以在编译时检查类型一致性，避免不必要的类型转换和类型错误。</p><p>没有泛型的时候，像 List 这样的集合类存储的是 Object 类型，导致从集合中读取数据时，必须进行强制类型转换，否则会引发 ClassCastException。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) list.get(<span class="number">0</span>);  <span class="comment">// 必须强制类型转换</span></span><br></pre></td></tr></table></figure><h3 id="使用方式">使用方式</h3><p>泛型一般有三种使用方式:<strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。</p><p><strong>1.泛型类</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化泛型类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;Integer&gt;(<span class="number">123456</span>);</span><br></pre></td></tr></table></figure><p><strong>2.泛型接口</strong> ：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现泛型接口，指定类型：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeneratorImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.泛型方法</strong> ：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">( E[] inputArray )</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">for</span> ( E element : inputArray )&#123;</span><br><span class="line">         System.out.printf( <span class="string">&quot;%s &quot;</span>, element );</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">String[] stringArray = &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span> &#125;;</span><br><span class="line">printArray( intArray  );</span><br><span class="line">printArray( stringArray  );</span><br></pre></td></tr></table></figure><h3 id="泛型通配符">泛型通配符</h3><p><strong>常用的通配符为： T，E，K，V，？</strong></p><ul><li>？ 表示不确定的 java 类型</li><li>T (type) 表示具体的一个 java 类型</li><li>K V (key value) 分别代表 java 键值中的 Key Value</li><li>E (element) 代表 Element</li></ul><h3 id="泛型擦除">泛型擦除</h3><p>泛型擦除，也叫“类型擦除”。</p><p>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。</p><p>也就是说，在运行的时候是没有泛型的。</p><p>原因：</p><p>主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。</p><h2 id="注解">注解</h2><p>Java 注解本质上是一个标记</p><p>注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。</p><p>有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。</p><p>例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。</p><p>注解生命周期有三大类，分别是：</p><ul><li>RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件</li><li>RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了</li><li>RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息</li></ul><h2 id="反射">反射</h2><p>反射允许 Java 在运行时检查和操作类的方法和字段。通过反射，可以动态地获取类的字段、方法、构造方法等信息，并在运行时调用方法或访问字段。</p><p>比如创建一个对象是通过 new 关键字来实现的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><p>Person 类的信息在编译时就确定了，那假如在编译期无法确定类的信息，但又想在运行时获取类的信息、创建类的实例、调用类的方法，这时候就要用到反射。</p><p>反射功能主要通过 <code>java.lang.Class</code> 类及 <code>java.lang.reflect</code> 包中的类如 Method, Field, Constructor 等来实现。</p><p>我们可以装来动态加载类并创建对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;java.util.Date&quot;</span>;</span><br><span class="line">Class&lt;?&gt; cls = Class.forName(className);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">System.out.println(obj.getClass().getName());</span><br></pre></td></tr></table></figure><p>我们可以这样来访问字段和方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载并实例化类</span></span><br><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.util.Date&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并调用方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;getTime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(obj);</span><br><span class="line">System.out.println(<span class="string">&quot;Time: &quot;</span> + result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问字段</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;fastTime&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>); <span class="comment">// 对于私有字段需要这样做</span></span><br><span class="line">System.out.println(<span class="string">&quot;fastTime: &quot;</span> + field.getLong(obj));</span><br></pre></td></tr></table></figure><h3 id="应用场景">应用场景</h3><p>①、Spring 框架就大量使用了反射来动态加载和管理 Bean。</p><p>②、Java 的动态代理（Dynamic Proxy）机制就使用了反射来创建代理类。代理类可以在运行时动态处理方法调用，这在实现 AOP 和拦截器时非常有用。</p><p>③、JUnit 和 TestNG 等测试框架使用反射机制来发现和执行测试方法。反射允许框架扫描类，查找带有特定注解（如 <code>@Test</code>）的方法，并在运行时调用它们。</p><h3 id="原理">原理</h3><p>Java 程序的执行分为编译和运行两步，编译之后会生成字节码(.class)文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。</p><h2 id="JDK1-8-特性">JDK1.8 特性</h2><p>JDK 1.8 新增了不少新的特性，如 Lambda 表达式、接口默认方法、Stream API、日期时间 API、Optional 类等。</p><p>①、Java 8 允许在接口中添加默认方法和静态方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">myDefaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My default method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">myStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My static method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②、Lambda 表达式描述了一个代码块（或者叫匿名方法），可以将其作为参数传递给构造方法或者普通方法以便后续执行。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LamadaTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;沉默王二&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③、Stream 是对 Java 集合框架的增强，它提供了一种高效且易于使用的数据处理方式。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;中国加油&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;世界加油&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;世界加油&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().distinct().count();</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><p>④、Java 8 引入了一个全新的日期和时间 API，位于<code>java.time</code>包中。这个新的 API 纠正了旧版<code>java.util.Date</code>类中的许多缺陷。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">&quot;Today&#x27;s Local date : &quot;</span> + today);</span><br><span class="line"></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">System.out.println(<span class="string">&quot;Local time : &quot;</span> + time);</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(<span class="string">&quot;Current DateTime : &quot;</span> + now);</span><br></pre></td></tr></table></figure><p>⑤、引入 Optional 是为了减少空指针异常。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optional = Optional.of(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">optional.isPresent();           <span class="comment">// true</span></span><br><span class="line">optional.get();                 <span class="comment">// &quot;姓名&quot;</span></span><br><span class="line">optional.orElse(<span class="string">&quot;姓名&quot;</span>);    <span class="comment">// &quot;bam&quot;</span></span><br><span class="line">optional.ifPresent((s) -&gt; System.out.println(s.charAt(<span class="number">0</span>)));     <span class="comment">// &quot;姓&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Lambda表达式">Lambda表达式</h3><p>Lambda 表达式主要用于提供一种简洁的方式来表示匿名方法，使 Java 具备了函数式编程的特性。</p><p>比如说我们可以使用 Lambda 表达式来简化线程的创建：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span>)).start();</span><br></pre></td></tr></table></figure><p>所谓的函数式编程，就是把函数作为参数传递给方法，或者作为方法的结果返回。比如说我们可以配合 Stream 流进行数据过滤：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">List&lt;Integer&gt; evenNumbers = numbers.stream()</span><br><span class="line">    .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>其中 <code>n -&gt; n % 2 == 0</code> 就是一个 Lambda 表达式。表示传入一个参数 n，返回 <code>n % 2 == 0</code> 的结果。</p><h3 id="Optional">Optional</h3><p><code>Optional</code>是用于防范<code>NullPointerException</code>。</p><p>可以将 <code>Optional</code> 看做是包装对象（可能是 <code>null</code>, 也有可能非 <code>null</code>）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 <code>Optional</code> 来包装它，这也是在 Java 8 被推荐使用的做法。</p><h3 id="Stream流">Stream流</h3><p><code>Stream</code> 流，简单来说，使用 <code>java.util.Stream</code> 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 <em>终端操作</em>。 终端操作会返回一个结果，而中间操作会返回一个 <code>Stream</code> 流。</p><p>Stream 流一般用于集合，我们对一个集合做几个常见操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; stringCollection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">stringCollection.add(<span class="string">&quot;ddd2&quot;</span>);</span><br><span class="line">stringCollection.add(<span class="string">&quot;aaa2&quot;</span>);</span><br><span class="line">stringCollection.add(<span class="string">&quot;bbb1&quot;</span>);</span><br><span class="line">stringCollection.add(<span class="string">&quot;aaa1&quot;</span>);</span><br><span class="line">stringCollection.add(<span class="string">&quot;bbb3&quot;</span>);</span><br><span class="line">stringCollection.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">stringCollection.add(<span class="string">&quot;bbb2&quot;</span>);</span><br><span class="line">stringCollection.add(<span class="string">&quot;ddd1&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p><strong>Filter 过滤</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stringCollection</span><br><span class="line">    .stream()</span><br><span class="line">    .filter((s) -&gt; s.startsWith(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;aaa2&quot;, &quot;aaa1&quot;</span></span><br></pre></td></tr></table></figure><p><strong>Sorted 排序</strong></p></li><li><pre><code class="language-java">stringCollection    .stream()    .sorted()    .filter((s) -&gt; s.startsWith(&quot;a&quot;))    .forEach(System.out::println);// &quot;aaa1&quot;, &quot;aaa2&quot;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **Map 转换**</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  stringCollection</span><br><span class="line">      .stream()</span><br><span class="line">      .map(String::toUpperCase)</span><br><span class="line">      .sorted((a, b) -&gt; b.compareTo(a))</span><br><span class="line">      .forEach(System.out::println);</span><br><span class="line">  </span><br><span class="line">  // &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;</span><br></pre></td></tr></table></figure></code></pre></li><li><p><strong>Match 匹配</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">anyStartsWithA</span> <span class="operator">=</span></span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .anyMatch((s) -&gt; s.startsWith(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(anyStartsWithA);      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证 list 中 string 是否都是以 a 开头的</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">allStartsWithA</span> <span class="operator">=</span></span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .allMatch((s) -&gt; s.startsWith(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(allStartsWithA);      <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证 list 中 string 是否都不是以 z 开头的,</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">noneStartsWithZ</span> <span class="operator">=</span></span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .noneMatch((s) -&gt; s.startsWith(<span class="string">&quot;z&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(noneStartsWithZ);      <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Count 计数</strong></p><p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先对 list 中字符串开头为 b 进行过滤，让后统计数量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">startsWithB</span> <span class="operator">=</span></span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .filter((s) -&gt; s.startsWith(<span class="string">&quot;b&quot;</span>))</span><br><span class="line">        .count();</span><br><span class="line"></span><br><span class="line">System.out.println(startsWithB);    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Reduce</strong></p></li></ul><p>​<code>Reduce</code> 中文翻译为：<em>减少、缩小</em>。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p><p>​</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; reduced =</span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .sorted()</span><br><span class="line">        .reduce((s1, s2) -&gt; s1 + <span class="string">&quot;#&quot;</span> + s2);</span><br><span class="line"></span><br><span class="line">reduced.ifPresent(System.out::println);</span><br><span class="line"><span class="comment">// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《LinkedList底层原理》</title>
      <link href="/2025/06/04/2025060413/"/>
      <url>/2025/06/04/2025060413/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介">一、简介</h2><p><code>LingkedList</code> 是 Java 集合框架中一个常用的类，它实现了 <code>List</code> 、<code>Queue</code> 和 <code>Serializable</code> 接口。底层使用 <strong>双向链表</strong> 作为数据结构。</p><h3 id="特点：">特点：</h3><table><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td>增删操作快</td><td>插入、删除节点时不需要移动元素，效率高</td></tr><tr><td>查询效率低</td><td>查询元素需要从头或尾部一个个遍历</td></tr><tr><td>线程不安全</td><td>多线程环境下需手动同步或使用 <code>Collections.synchronizedList</code> 包装</td></tr></tbody></table><h2 id="二、底层结构">二、底层结构</h2><p><code>LinkedList</code> 的核心是一个内部静态类 <code>Node&lt;E&gt;</code> :</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="成员变量">成员变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>first</code>：指向链表的头结点</li><li><code>last</code>：指向链表的尾结点</li><li><code>size</code>：链表元素个数</li></ul><p>整个链表通过节点的 <code>next</code> 和 <code>prev</code> 字段形成双向连接。</p><h2 id="三、常用方法">三、常用方法</h2><h3 id="add-E-e">add(E e)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将元素添加到链表末尾，如果链表为空，则 <code>first</code> 和 <code>last</code> 都指向新节点。</p><h3 id="remove">remove()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">removeFirst</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用 unlinkFirst(f) 断开节点与链表的联系并返回其值</span></span><br><span class="line">    <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> E <span class="title function_">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除当前头结点的引用，帮助 GC 回收</span></span><br><span class="line">    f.item = <span class="literal">null</span>;</span><br><span class="line">    f.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新链表的 first 指针</span></span><br><span class="line">    first = next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">        last = <span class="literal">null</span>;     <span class="comment">// 链表已经为空</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="literal">null</span>; <span class="comment">// 去除旧头结点的前向引用</span></span><br><span class="line"></span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从链表头部删除元素，同时更新 <code>first</code> 指针。</p><h3 id="get-int-index-、node-int-index">get(int index)、node(int index)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 index &lt; size / 2，则从前往后找；否则从后往前找（提高效率）</span></span><br><span class="line">    <span class="comment">// 折中优化策略</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询时，<code>LinkedList</code> 会根据索引判断从头还是从尾开始遍历，优化性能。</p><h3 id="安全校验">安全校验</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkElementIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isElementIndex(index))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isElementIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在访问元素之前，会先校验是否越界，防止访问非法位置导致程序崩溃。</p><h2 id="四、注意事项">四、注意事项</h2><ul><li>不要使用 <code>LinkedList</code> 来频繁随机访问元素。</li><li>如果是栈、队列或双端队列操作，<code>LinkedList</code> 是一个很好的选择。</li><li>Java 8 之后建议使用 <code>ArrayDeque</code> 替代 <code>LinkedList</code> 实现队列，性能更优。</li></ul><h2 id="总结">总结</h2><ul><li><code>LinkedList</code> 是基于 <strong>双向链表</strong> 实现的，适用于 <strong>频繁插入删除</strong> 的场景。</li><li>每个节点包含三个属性：当前元素、前一个节点引用、后一个节点引用。</li><li>查询操作性能相对较低，但可以通过判断位置优化遍历方向。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《ArrayList的底层原理》</title>
      <link href="/2025/06/03/2025060319/"/>
      <url>/2025/06/03/2025060319/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介">一、简介</h2><p><code>ArrayList</code> 是 Java 集合框架中最常用的 <strong>动态数组实现类</strong>，实现了 <code>List</code> 接口，允许存储 <strong>有序、可重复</strong> 的元素。</p><ul><li>支持随机访问，访问时间复杂度为 <code>O(1)</code></li><li>插入/删除非尾部元素需移动数据，时间复杂度为 <code>O(n)</code></li><li>非线程安全，需手动处理并发问题</li></ul><hr><h2 id="二、底层结构">二、底层结构</h2><p>核心成员变量：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认初始容量大小</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 空数组（用于空实例）。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//用于默认大小空实例的共享空数组实例。</span></span><br><span class="line">   <span class="comment">//我们把它从EMPTY_ELEMENTDATA数组中区分出来，以知道在添加第一个元素时容量需要增加多少。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 保存ArrayList数据的数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * ArrayList 所包含的元素个数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure><ul><li>元素存储在 <code>Object[]</code> 中</li><li>所有元素按顺序排列，支持下标访问</li></ul><hr><h2 id="三、初始化与扩容机制">三、初始化与扩容机制</h2><h3 id="1-初始化容量">1. 初始化容量</h3><ul><li>使用无参构造时，并不会立刻分配内存</li><li>懒加载机制：第一次添加元素时初始化容量为 <strong>10</strong></li></ul><h3 id="2-ensureCapacityInternal：确保容量">2. <code>ensureCapacityInternal</code>：确保容量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-ensureExplicitCapacity：触发扩容判断">3. <code>ensureExplicitCapacity</code>：触发扩容判断</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">modCount++;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">//调用grow方法进行扩容，调用此方法代表已经开始扩容了</span></span><br><span class="line">grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>modCount</code> : 快速失败机制</li></ul><h3 id="4-grow：核心扩容逻辑">4. <code>grow</code>：核心扩容逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ArrayList扩容的核心方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//将oldCapacity 右移一位，相当于oldCapacity / 2，</span></span><br><span class="line"><span class="comment">//位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line"><span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span></span><br><span class="line"><span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">newCapacity = minCapacity;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//再检查新容量是否超出了ArrayList所定义的最大容量，</span></span><br><span class="line"><span class="comment">//若超出了，则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE，</span></span><br><span class="line"><span class="comment">//如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为Integer.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE。</span></span><br><span class="line"><span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// minCapacity 通常接近 size，所以这样做是有利的</span></span><br><span class="line">elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-hugeCapacity：极限处理">5. <code>hugeCapacity</code>：极限处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要分配的最大数组大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较minCapacity和 MAX_ARRAY_SIZE</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>)<span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、常用方法源码解析">四、常用方法源码解析</h2><h3 id="1-add-int-index-E-e-：添加元素">1. <code>add(int index, E e)</code>：添加元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在此列表中的指定位置插入指定的元素。</span></span><br><span class="line"><span class="comment"> * 先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal</span></span><br><span class="line"><span class="comment"> * 方法保证capacity足够大；</span></span><br><span class="line"><span class="comment"> * 再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>); <span class="comment">// 修改 modCount 的值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// arraycopy()这个实现数组之间复制的方法一定要看一下，下面就用到了arraycopy()方法实现数组自己复制自己</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">            size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-get-int-index-：获取元素">2. <code>get(int index)</code>：获取元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheck</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-remove-int-index-：删除元素">3. <code>remove(int index)</code>：删除元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除该列表中指定位置的元素。 将任何后续元素移动到左侧（从其索引中减去一个元素）。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> (E) elementData[index];</span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// 防止内存泄漏</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、总结">五、总结</h2><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>存储结构</td><td>动态数组 <code>Object[]</code></td></tr><tr><td>初始容量</td><td>默认 10（懒加载）</td></tr><tr><td>扩容机制</td><td>原容量 * 1.5</td></tr><tr><td>插入/删除效率</td><td>尾部快，中间慢</td></tr><tr><td>线程安全</td><td>非线程安全，需自行加锁或使用并发集合</td></tr></tbody></table><h3 id="适用场景">适用场景</h3><ul><li>随机访问频繁</li><li>插入删除不多</li><li>单线程或自行控制并发</li></ul>]]></content>
      
      
      <categories>
          
          <category> 底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《素笺初展时》</title>
      <link href="/2025/06/03/start/"/>
      <url>/2025/06/03/start/</url>
      
        <content type="html"><![CDATA[<h2 id="启程时刻-✨">启程时刻 ✨</h2><p><strong>2025 年 6 月 3 日</strong>，博客的第一页在此展开。</p><blockquote><p>像翻开一本新日记的扉页，<br>干净而安静。<br>键盘尚未温热，页面素净如雪，<br>宛如新铺的小径，<br>等待足迹的落下，思绪的绵延。</p></blockquote><h3 id="避风角落-🏮">避风角落 🏮</h3><p>这里不是喧嚣之地，<br>而是：</p><ul><li>记录想法的 📖 记事本</li><li>分享灵感的 💡 储藏间</li><li>偶尔碎语的 🌙 夜光灯</li></ul><h3 id="慢写宣言-🖋️">慢写宣言 🖋️</h3><p>在这个快转的世界里，<br>我们选择：</p><ol><li><strong>给文字以呼吸的空间</strong></li><li><strong>为心情保留回望的窗口</strong></li><li><strong>替未来的自己点亮一盏灯</strong></li></ol><blockquote><p>“若无一丝错落，<br>人生怎会如诗？”</p></blockquote><hr><p>🌱 <strong>从今日起</strong>，与博客共生长。<br>🫂 <strong>欢迎你</strong>，愿常常相逢。</p><p>—— 记于起点</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
